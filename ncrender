#!/usr/bin/env python3

import sys
import os
import re
import time
import lxml.etree as ET

CONF = {
	"site": "Vas' Website",
	"desc": "A blog on technology, nerddom, and politics",
	"url": "https://vas.neocities.org" }

def now(): return time.strftime('%a, %d %b %Y %H:%M:%S +0000')
def full_url (partial): return CONF["url"] + partial if partial[0] is "/" else CONF["url"] + "/" + partial
def parent_dir (path): return os.path.basename(os.path.dirname(path))
def stdout (s): sys.stdout.write(compactify(s))
def compactify (s):
	s = re.sub(r"\s+", " ", s, flags=re.MULTILINE)
	return s

def E (tag, attrs={}, children=[], text=""):
	elem = ET.Element(tag, attrs)
	for child in children: elem.append(child)
	if (text): elem.text = text
	return elem

def stamp_to_rfc822(string):
	return time.strftime(
		'%a, %d %b %Y %H:%M:%S +0000',
		time.gmtime(int(string)))

def stamp_to_ymd(string):
	return time.strftime(
		'%Y-%m-%d',
		time.gmtime(int(string)))

def HTML (date, title, content):
	if not content.tag is "body": content.tag = "body"
	tree = E("html", {"lang": "en-gb"}, [
		E("head", {}, [
			E("meta", {"charset": "utf-8"}),
			E("meta", {"name": "viewport", "content": "width=device-width, initial-scale=1.0"}),
			E("meta", {"name": "url", "content": CONF["url"]}),
			E("meta", {"name": "author", "content": "Vas"}),
			E("meta", {"name": "description", "content": CONF["desc"]}),
			E("meta", {"name": "date", "content": date}),
			E("link", {"rel": "stylesheet", "href": "/style.css"}),
			E("link", {"rel": "icon", "href": "/favicon.ico?v=2"}),
			E("link", {"rel": "alternate", "href": "/rss.xml", "type": "application/rss+xml"}),
			E("title", text=title) ]),
		content ])
	return "<!DOCTYPE html>" + ET.tostring(tree, encoding="unicode")

def item (pathname):
	with open(pathname, "r") as f: tree = ET.fromstring(f.read())
	title = tree.find("./head/title")
	title.tag = "h1"
	body = tree.find("./body")
	pubdate = tree.find("./head/meta[@name='timestamp']")
	pubdate.tag = "data"
	pubdate.attrib["class"] = "date"
	pubdate.text = stamp_to_ymd(pubdate.attrib["value"])
	header = E("header", {}, [
		E("a", {"href": "/"}, text="Home")])
	body.insert(0, title)
	body.insert(0, pubdate)
	body.insert(0, header)
	return HTML(
		stamp_to_rfc822(pubdate.attrib["value"]),
		title.text,
		body)

def index (articles):
	def sum_article (article):
		with open(article, "r") as f: tree = ET.fromstring(f.read())
		timestamp = tree.find("./head/meta[@name='timestamp']").attrib["value"]
		title = tree.find("./head/title").text
		firstp = tree.find("./body/p[1]")
		return E("article", {}, [
			E("data", {"class": "date", "value": timestamp}, text=stamp_to_ymd(timestamp)),
			E("h1", {}, [ E("a", { "href": article }, text=title) ]),
			firstp ])

	lst = [sum_article(article) for article in articles]
	lst.sort(key=lambda x: x.find("./data").attrib["value"], reverse=True)

	tree = E("body", {}, [
		E("header", {}, [
			E("div", {}, [
				E("img", {"alt": "website icon", "id": "icon", "src": "/pics/icon.png"}),
				E("h1", {}, text=CONF["site"])]),
			E("p", text=CONF["desc"]),
			E("nav", {}, [
				E("a", { "href": "/rss.xml"}, text="RSS feed"),
				E("a", { "href": "mailto:whiterocket@outlook.com"}, text="Email"),
				E("a", { "href": "xmpp:vaas@xmpp.jp"}, text="XMPP"),
				E("a", { "href": "https://github.com/vaaas"}, text="GitHub")])]),
		] + lst)
	return HTML(now(), CONF["site"], tree)

def rss (index):
	def article_to_item (a):
		link = a.find("./h1/a")
		pathname = full_url(link.attrib["href"])
		timestamp = a.find('./data[@class="date"]').attrib["value"]
		pubdate = stamp_to_rfc822(timestamp)
		blurb = ET.CDATA("""%s<p><a href="%s">Read more</a></p>""" % (ET.tostring(a.find("./p[1]"), encoding="unicode"), pathname))
		return E("item", {}, [
			E("title", text=link.text),
			E("link", text=pathname),
			E("guid", text=pathname),
			E("pubDate", text=pubdate),
			E("description", text=blurb)])

	with open(index, "r") as f: itree = ET.fromstring(f.read())
	items = [article_to_item(a) for a in itree.iterfind(".//article")]
	tree = E("rss", {"version": "2.0"}, [
		E("channel", {}, [
			E("title", text=CONF["site"]),
			E("link", text=CONF["url"]),
			E("description", text=CONF["desc"]),
			E("pubDate", text=items[0].find("./pubDate").text),
			E("lastBuildDate", text=now()),
			E("language", text="en-gb"),
			E("ttl", text="1440")] + items)])

	return """<?xml version="1.0" encoding="utf-8" ?>""" + ET.tostring(tree, encoding="unicode")

def main (fn, args):
	if fn == "item": stdout(item(args[0]))
	elif fn == "index": stdout(index(args))
	elif fn == "rss": stdout(rss(args[0]))
	else: return 1

if __name__ == "__main__":
	main(sys.argv[1], sys.argv[2:])
