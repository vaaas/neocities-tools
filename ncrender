#!/usr/bin/env python3
import sys
import os
import time
import json
import string
from functools import reduce

RS = chr(30)

CONF = json.loads(open("config").read())

def pipe2(a, b):
	return b(a)

def pipe(x, *xs):
	return reduce(pipe2, xs, x)

def cmap(fn):
	return lambda xs: map(fn, xs)

def absolute_links(x):
	for i in ["href", "src"]:
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def escape(x):
	return (x
		.replace("&", "&amp;")
		.replace("<", "&lt;")
		.replace(">", "&gt;"))

def int_to_base(x, base):
	digits = string.digits + string.ascii_letters
	if x == 0:
		return digits[0]
	num = []
	while x:
		div, mod = divmod(x, base)
		num.append(digits[mod])
		x = div
	num.reverse()
	return ''.join(num)

def stamp_to_ymd(timestamp):
	return time.strftime(
		"%Y-%m-%d",
		time.gmtime(int(timestamp)))

def stamp_to_rfc(timestamp):
	return time.strftime(
		"%a, %d %b %Y %H:%M:%S +0000",
		time.gmtime(int(timestamp)))

def item_stream(fp, block_size=2048):
	data = fp.read(block_size)
	while True:
		idx = data.find(RS, 1)
		if idx == -1:
			chunk = fp.read(block_size)
			if chunk == "":
				break
			data += chunk
		else:
			yield data[:idx]
			data = data[idx:]
	if not data == "":
		yield data

def itemnum(fp, block_size=2048):
	counter = 0
	while True:
		chunk = fp.read(block_size)
		counter += chunk.count(RS)
		if not chunk:
			return counter

def parse(item):
	return Item(*item.strip().split("\n", 2))

class Target:
	def __init__(self, x):
		self.pathname = x
		self.dependencies = []
		self.callback = None

	def deps(self, x):
		self.dependencies = x
		return self

	def cb(self, x):
		self.callback = x
		return self

	def youngerp(self):
		own = os.path.getmtime(self.pathname) if os.path.isfile(self.pathname) else -1
		others = pipe(
			self.dependencies,
			cmap(lambda x: int(x.timestamp)),
			max)
		return own < others

	def make(self, force):
		if force or self.youngerp():
			print("Making \033[1m\033[92m%s\033[0m" % (self.pathname,))
			self.callback(self.pathname, self.dependencies)

class Item:
	def __init__(self, timestamp, ptype, content):
		self.timestamp = timestamp
		self.ptype = ptype
		self.content = content

class RangeList(list):
	def __init__(self, xs=""):
		super().__init__()
		for i in xs:
			self.add(i)

	def add(self, x):
		self.append({"name": "index.html", "range": x, "next": None, "previous": None})
		if len(self) > 1:
			self[-2]["name"] = "index%s.html" % (str(self[-2]["range"].start))
			self[-2]["next"] = self[-1]
			self[-1]["previous"] = self[-2]

def ranges(n, lim=CONF["items"]):
	lst = RangeList()
	c = 0
	while n > 0:
		if n > lim+10:
			lst.add(range(c*lim, (c+1)*lim))
			c += 1
			n -= lim
		else:
			lst.add(range(c*lim, c*lim + n))
			c += 1
			n = 0
	return lst

def write(pathname, contents):
	with open(pathname, "w") as fp:
		fp.write(contents)

def render_frontpage(**options):
	def callback(pathname, items):
		body = (navhead(**options) +
			"<main>" +
			"\n".join(pipe(items, reversed, cmap(render_item))) +
			"</main>")
		with open("templates/frontpage.html", "r") as fp:
			tpl = fp.read(-1)
		write(pathname, tpl.replace("{{BODY}}", body))
	return callback

def render_index(**options):
	def callback(pathname, items):
		body = (navhead(up=True, **options) +
			"<main>" +
			"\n".join(pipe(items, reversed, cmap(render_item))) +
			"</main>")
		with open("templates/index.html", "r") as fp:
			tpl = fp.read(-1)
		write(pathname, tpl.replace("{{BODY}}", body))
	return callback

def render_item(item):
	guid = int_to_base(int(item.timestamp), 62)
	return ('<article id="%s"><span class="data">%s</span>%s</article>' %
		(guid, stamp_to_ymd(item.timestamp), item.content))

def render_rss(pathname, items):
	body = "\n".join(map(render_item_rss, reversed(items)))
	with open("templates/rss.xml", "r") as fp:
		tpl = fp.read(-1)
	write(pathname,
		tpl
			.replace("{{PUBDATE}}", stamp_to_rfc(items[-1].timestamp))
			.replace("{{BODY}}", body))

def render_item_rss(item):
	guid = int_to_base(int(item.timestamp), 62)
	return ("<item>" +
		"<title>New post on %s (%s)</title>" % (CONF["sitename"], guid) +
		"<guid isPermaLink=\"false\">post/%s</guid>" % (guid,) +
		"<pubDate>%s</pubDate>" % (stamp_to_rfc(item.timestamp),) +
		"<description>%s</description>" % (escape(absolute_links(item.content)),) +
		"<link>https://%s.neocities.org/#%s</link>" %(CONF["sitename"], guid) +
		"</item>")

def navhead(p=None, n=None, up=False):
	return ("<nav>" +
		("<a href=\"%s\">← Previous</a>" % (p,) if p else "") +
		("<a href=\"../\">↑ Up</a>" if up else "") +
		("<a href=\"%s\">Next →</a>" % (n,) if n else "") +
		"</nav>")

def main(pathname, args):
	force = False
	if args and args[0] == "-f":
		force = True

	fp = open(pathname, "r")
	rngs = ranges(itemnum(fp))
	cr = rngs[0]
	c = 0
	lst = []
	fp.seek(0)
	for item in item_stream(fp):
		c += 1
		item = parse(item)
		lst.append(item)
		if not c in cr["range"]:
			if cr["name"] == "index.html":
				(Target("render/"+cr["name"])
				.deps(tuple(lst))
				.cb(render_frontpage(n=cr["next"], p=cr["previous"]))
				.make(force))
				(Target("render/"+"rss.xml")
				.deps(tuple(lst[-100:]))
				.cb(render_rss)
				.make(force))
			else:
				(Target("render/"+cr["name"])
				.deps(tuple(lst))
				.cb(render_index(n=cr["next"], p=cr["previous"]))
				.make(force))
			lst.clear()
			cr = cr["next"]
	fp.close()

if __name__ == "__main__":
	main("posts", sys.argv[1:])
