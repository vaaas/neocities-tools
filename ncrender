#!/usr/bin/env python3

import sys
import os
import re
import time
import lxml.etree as ET

CONF = {
	"site": "Vas' Website",
	"desc": "A blog on technology, nerddom, and politics",
	"url": "https://vas.neocities.org" }

def now(): return time.strftime('%a, %d %b %Y %H:%M:%S +0000')
def full_url (partial): return CONF["url"] + partial if partial[0] is "/" else CONF["url"] + "/" + partial

def write(path, what):
	with open(path, "w") as f:
		f.write(compactify(what))

def dirtree (start):
	tree = {}
	for entry in os.listdir(start):
		pathname = os.path.join(start, entry)
		tree[entry] = os.listdir(pathname) if os.path.isdir(pathname) else None
	return tree

class Target:
	def __init__ (self, pathname, reqs, fn):
		self.pathname = pathname
		self.reqs = reqs
		self.fn = fn
	
	def make(self):
		print(self.pathname, ":", " ".join(self.reqs))
		self.fn(self.pathname, self.reqs)

	def makep (self):
		own = os.path.getmtime(self.pathname) if os.path.isfile(self.pathname) else -1
		others = [os.path.getmtime(req) for req in self.reqs]
		others.sort()
		if own < others[-1]: self.make()

def compactify (s):
	s = re.sub(r"\s+", " ", s, flags=re.MULTILINE)
	return s

def E (tag, attrs={}, children=[], text=""):
	elem = ET.Element(tag, attrs)
	for child in children: elem.append(child)
	if (text): elem.text = text
	return elem

def stamp_to_rfc822(string):
	return time.strftime(
		'%a, %d %b %Y %H:%M:%S +0000',
		time.gmtime(int(string)))

def stamp_to_ymd(string):
	return time.strftime(
		'%Y-%m-%d',
		time.gmtime(int(string)))

def HTML (date, title, content):
	if not content.tag is "body": content.tag = "body"
	tree = E("html", {"lang": "en-gb"}, [
		E("head", {}, [
			E("meta", {"charset": "utf-8"}),
			E("meta", {"name": "viewport", "content": "width=device-width, initial-scale=1.0"}),
			E("meta", {"name": "url", "content": CONF["url"]}),
			E("meta", {"name": "author", "content": "Vas"}),
			E("meta", {"name": "description", "content": CONF["desc"]}),
			E("meta", {"name": "date", "content": date}),
			E("link", {"rel": "stylesheet", "href": "/style.css"}),
			E("link", {"rel": "icon", "href": "/favicon.ico?v=2"}),
			E("link", {"rel": "alternate", "href": "/rss.xml", "type": "application/rss+xml"}),
			E("title", text=title) ]),
		content ])
	return "<!DOCTYPE html>" + ET.tostring(tree, encoding="unicode")

def item (target, reqs):
	pathname = reqs[0]
	with open(pathname, "r") as f: tree = ET.fromstring(f.read())
	title = tree.find("./head/title")
	title.tag = "h1"
	body = tree.find("./body")
	pubdate = tree.find("./head/meta[@name='timestamp']")
	pubdate.tag = "data"
	pubdate.attrib["class"] = "date"
	pubdate.text = stamp_to_ymd(pubdate.attrib["value"])
	header = E("header", {}, [
		E("a", {"href": "/"}, text=CONF["site"]),
		pubdate])
	body.insert(0, title)
	body.insert(0, header)
	return write(target, HTML(
		stamp_to_rfc822(pubdate.attrib["value"]),
		title.text,
		body))

def index (target, articles):
	def sum_article (article):
		with open(article, "r") as f: tree = ET.fromstring(f.read())
		timestamp = tree.find("./head/meta[@name='timestamp']").attrib["value"]
		title = tree.find("./head/title").text
		return E("article", {"data-post-type": "article"}, children=[
			E("header", children=[
				E("span", text="ðŸ“„ Article "),
				E("data", {"class": "date", "value": timestamp}, text=stamp_to_ymd(timestamp))]),
			E("h1", children=[
				E("a", { "href": os.path.basename(article) }, text=title)]),
			tree.find("./body/p[1]")])

	lst = [sum_article(article) for article in articles]
	lst.sort(key=lambda x: x.find(".//data").attrib["value"], reverse=True)

	header = E("header", {}, [
		E("div", {}, [
			E("img", {"alt": "website icon", "id": "icon", "src": "/pics/icon.png"}),
			E("h1", {}, text=CONF["site"])]),
		E("p", text=CONF["desc"]),
		E("nav", {}, [
			E("a", { "href": "/rss.xml"}, text="RSS feed"),
			E("a", { "href": "mailto:whiterocket@outlook.com"}, text="Email"),
			E("a", { "href": "xmpp:vaas@xmpp.jp"}, text="XMPP"),
			E("a", { "href": "https://github.com/vaaas"}, text="GitHub")])])

	tree = E("body", {"class": "index"}, [header] + lst)
	return write(target, HTML(now(), CONF["site"], tree))

def rss (target, reqs):
	index = reqs[0]
	def article_to_item (a):
		link = a.find(".//a[1]")
		pathname = full_url(link.attrib["href"])
		timestamp = a.find('.//data[@class="date"]').attrib["value"]
		pubdate = stamp_to_rfc822(timestamp)
		blurb = ET.CDATA("""%s<p><a href="%s">Read more</a></p>""" % (ET.tostring(a.find("./p"), encoding="unicode"), pathname))
		return E("item", {}, [
			E("title", text=link.text),
			E("link", text=pathname),
			E("guid", text=pathname),
			E("pubDate", text=pubdate),
			E("description", text=blurb)])

	with open(index, "r") as f: itree = ET.fromstring(f.read())
	items = [article_to_item(a) for a in itree.iterfind(".//article")]
	tree = E("rss", {"version": "2.0"}, [
		E("channel", {}, [
			E("title", text=CONF["site"]),
			E("link", text=CONF["url"]),
			E("description", text=CONF["desc"]),
			E("pubDate", text=items[0].find("./pubDate").text),
			E("lastBuildDate", text=now()),
			E("language", text="en-gb"),
			E("ttl", text="1440")] + items)])

	return write(target, """<?xml version="1.0" encoding="utf-8" ?>""" + ET.tostring(tree, encoding="unicode"))

def move (target, reqs):
	os.rename(reqs[0], target)

def main (args):
	FORCE = True if len(args) > 0 and args[0] == "-f" else False

	source = "posts"
	target = "render"

	articles = [ os.path.join(source, "articles", article) for article in os.listdir(os.path.join(source, "articles")) ]
	tgts = []

	for article in articles:
		tgts.append(Target(
			os.path.join(target, os.path.basename(article)),
			[article],
			item))
	
	tgts.append(Target(
		os.path.join(target, "index.html"),
		articles,
		index))

	tgts.append(
		Target(
			os.path.join(target, "rss.xml"),
			[os.path.join(target, "index.html")],
			rss))

	for tgt in tgts:
		if FORCE or tgt.makep():
			tgt.make()

if __name__ == "__main__":
	main(sys.argv[1:])
