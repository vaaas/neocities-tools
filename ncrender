#!/usr/bin/env python3
import sys, os, time, json, string
from typing import Callable, Iterable, Union, Any, Tuple, List, Optional, TextIO

CONF = json.loads(open('config').read())
ITEMS: int = CONF['items']
DIGITS: str = string.digits + string.ascii_letters
FORCE: bool = False

#types
Item = Tuple[int, str, str]
Page = Tuple[str, List[Item]]
Prop = Tuple[str, str]
Elem = Tuple[str, Optional[Iterable[Prop]], Optional[Iterable[Union[str, 'Elem']]]] # type: ignore

def main(pathname: str, args: list) -> None:
	global FORCE
	FORCE = len(args) > 0 and args[0] == '-f'
	posts: Iterable[Item] = (parse(x) for x in item_stream(read(pathname)))
	total: List[List[Item]] = list(group(ITEMS, sorted(posts, key=lambda x: x[0])))

	x: Iterable[Tuple[str, str]] = (
		map(render_index,
		filter(lambda x: younger(x[0]),
		double_link
		(map(lambda x: (niceName('index%s.html', x[0]), x[1]),
		enumerate
		(reversed
		(total)))))))
	for i in x: write(i)

	y: Tuple[str, List[Item]] = ('rss.xml', total[-1])
	if younger(y): write(render_rss(y))

def group(n: int, xs: Iterable) -> Iterable[List]:
	margin: int = n//5
	g: List = []
	for x in xs:
		g.append(x)
		if len(g) >= n + margin:
			yield g[:n]
			g = g[n:]
	if len(g) > 0: yield g[:]

def write(x: Tuple[str, str]) -> None:
	if not x[1]: return
	with open('render/'+x[0], 'w') as p:
		print('Making \033[1m\033[92m%s\033[0m' % (x[0],))
		p.write(x[1])

def niceName(s: str, x: int) -> str:
	return s % ('' if x == 0 else (x+1)*ITEMS,)

def render_index(items: Tuple[Page, Optional[Page], Optional[Page]]) -> Tuple[str, str]:
	name: str =  items[0][0]
	posts: List[Item] = items[0][1]
	prev: Union[str, None] = items[1][0] if isinstance(items[1], tuple) else None
	next: Union[str, None] = items[2][0] if isinstance(items[2], tuple) else None
	tree: Elem = ('html', (('lang', 'en-gb'),), (
		('head', None, (
			('meta', (('charset', 'utf-8'),), None),
			('meta', (('name', 'viewport'), ('content', 'width=device-width, initial-scale=1.0'),), None),
			('meta', (('name', 'url'), ('content', 'https://%s.neocities.org' % (CONF['sitename'],)),), None),
			('meta', (('name', 'author'), ('content', CONF['author']),), None),
			('meta', (('name', 'description'), ('content', CONF['title']),), None),
			('link', (('rel', 'stylesheet'), ('href', '/style.css'),), None),
			('link', (('rel', 'icon'), ('href', '/favicon.ico?v=2'),), None),
			('link', (('rel', 'alternate'), ('href', '/rss.xml'), ('type', 'application/rss+xml'),), None),
			('title', None, (CONF['title'],)),
		)),
		('body', None, (
			('a', (('href', '/'),),
				(('img', (
					('alt', 'website banner'),
					('class', 'icon'),
					('src', '/pics/ruri_thinking_icon.jpg')),
					None),)),
			('header', None, (
				('h1', None, (
					CONF['title'],
					' ',
					('a', (('href', '/rss.xml'),),
						(('img', (
							('alt', 'emoji'),
							('src', '/pics/feed-icon.svg')),
							None),)),)),
				('nav', None, map(lambda x: ('a', [('href', CONF['links'][x])], [x]), CONF['links'])),
			)),
			('section', (('id', 'about'),), (CONF['about'],)),
			navhead(prev, next),
			('main', None, map(render_item, reversed(posts))),
		)),
	))
	return (name, '<!DOCTYPE html>'+serialise(tree))

def render_item(item: Item) -> Elem:
	return ('article', [('id', guid(item[0]))], [
		('span', (('class', 'data'),), (ymd(item[0]),)),
		item[2],
	])

def render_rss(x: Page) -> Tuple[str, str]:
	tree: Elem = ('rss', (
		('version', '2.0'),
		('xmlns:atom', 'http://www.w3.org/2005/Atom')), (
			('channel', None, (
				('title', None, (CONF['title'],)),
				('links', None, ('https://%s.neocities.org' % (CONF['sitename'],),)),
				('atom:link', (
					('href', 'https://%s.neocities.org/rss.xml' % (CONF['sitename'],)),
					('rel', 'self'),
					('type', 'application/rss+xml')),
					None),
				('description', None, (CONF['title'],)),
				('pubDate', None, [rfctime(x[1][-1][0])]),
				('language', None, ('en-gb',)),
				('ttl', None, ('1440',)),
				*map(render_item_rss, reversed(x[1]))
			)),
		))
	return (x[0], '<?xml version="1.0" encoding="UTF-8" ?>'+serialise(tree))

def render_item_rss(item: Item) -> Elem:
	g: str = guid(item[0])
	return ('item', None, [
		('title', None, [ 'New post on %s (%s)' % (CONF['sitename'], g) ]),
		('guid', [ ('isPermalink', 'false') ], [ 'post/%s' % (g,) ]),
		('pubDate', None, [ rfctime(item[0]) ]),
		('description', None, [ escape(absolute_links(item[2])) ]),
		('link', None, [ 'https://%s.neocities.org/#%s' % (CONF['sitename'], g) ]),
	])

def navhead(p=None, n=None, up=False) -> Union[Elem, str]:
	children: List[Elem] = []
	if p: children.append(('a', [('href', p)], ['← Previous']))
	if up: children.append(('a', [('href', '../')],  ['↑ Up']))
	if n: children.append(('a', [('href', n)], ['Next →']))
	if len(children) == 0: return ''
	else: return ('nav', None, children)

def escape(x: str) -> str:
	for i in (('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')):
		x = x.replace(*i)
	return x

def int_to_base(x: int, base: int) -> str:
	if x == 0: return DIGITS[0]
	xs = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return emptyjoin(reversed(xs))

def absolute_links(x: str) -> str:
	for i in ('href', 'src'):
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def item_stream(fp: TextIO) -> Iterable[str]:
	return fp.read(-1).strip().split('\n\n')

def younger(x: Page) -> bool:
	if FORCE: return True
	path: str = 'render/' + x[0]
	own: float = os.path.getmtime(path) if os.path.isfile(path) else -1
	others: int = max(x[0] for x in x[1])
	return own < others

def serialise(x: Union[str, Elem]) -> str:
	if isinstance(x, str): return x
	xs: List[str] = ['<', x[0]]
	if x[1] is not None:
		xs.extend(' %s="%s"' % (x[0], x[1]) for x in x[1])
	if x[2] is not None:
		tmp = [serialise(x) for x in x[2]]
		if len(tmp) != 0:
			xs.append('>')
			xs.extend(tmp)
			xs.extend(['</', x[0], '>'])
	else:
		xs.append('/>')
	return emptyjoin(xs)

def parse(x: str) -> Item:
	p = x.strip().split('\n', 2)
	return (int(p[0]), p[1], p[2])

def double_link(xs: Iterable) -> Iterable[Tuple[Any, Optional[Any], Optional[Any]]]:
	a = None
	b = None
	c = None
	for x in xs:
		a = b
		b = c
		c = x
		if b is not None: yield (b, a, c)
	yield (c, b, None)

def guid(x: int) -> str:
	return int_to_base(x, 62)

def ymd(x: int) -> str:
	return time.strftime('%Y-%m-%d', time.gmtime(x))

def rfctime(x: int) -> str:
	return time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.gmtime(x))

def emptyjoin(x: Iterable) -> str:
	return ''.join(x)

def read(x: str) -> TextIO:
	return open(x, 'r')

if __name__ == '__main__': main('posts', sys.argv[1:])
