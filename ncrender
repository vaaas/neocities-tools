#!/usr/bin/env python3
import sys, os, time, json, string, re
from typing import Iterable, Union, Tuple, List, Optional, TextIO

os.chdir(os.path.dirname(sys.argv[0]))

CONF = json.loads(open('config').read())
DIGITS: str = string.digits + string.ascii_letters + '-_'
CATS: List[str] = []

#types
Item = Tuple[int, str, str]
Prop = Tuple[str, str]
Elem = Tuple[str, Optional[Iterable[Prop]], Optional[Iterable[Union[str, 'Elem']]]] # type: ignore

def main(pathname: str, args: list) -> None:
	if len(args) > 0 and args[0] == '-s': return make_single()

	global CATS
	posts: List[Item] = list(reversed(sorted(map(parse, item_stream(read(pathname))), key=first)))
	CATS = sorted(list(set(x[1] for x in posts)))

	write('index.html', render_index(posts))
	write('rss.xml', render_rss(posts[:20]))

def first(x): return x[0]

def make_single():
	data: str = sys.stdin.read(-1)
	match = re.search('<h1>(.+?)</h1>', data)
	if match is None:
		raise Exception('No title found. Are you sure it has an h1 element?')
	title: str = match.group(1)
	print('<!DOCTYPE html>', serialise(page(title, data)))

def write(f: str, x: str) -> None:
	if not x[1]: return
	with open('render/'+f, 'w') as p:
		print('Making \033[1m\033[92m%s\033[0m' % (f,))
		p.write(f)

def render_index(posts: Iterable[Item]) -> str:
	tree: Elem = html('en-gb', head(CONF['title']),
		('body', None, [
			('header', None, [
				imglink(href='/', src='/pics/ruri_thinking_icon.jpg', alt='icon'),
				('h1', None, [
					CONF['title'],
					imglink(href='/rss.xml', src='/pics/feed-icon.svg', alt='rss')
				]),
				('nav', [('id', 'links')], map(lambda x: ('a', [('href', CONF['links'][x])], [x]), CONF['links'])),
				('p', None, [ CONF['about'] ]),
			]),
			('main', None, [
				('nav', [('id', 'cats')], [
					('a', [('href', 'all'), ('class', 'active')], 'all'),
					*(('a', [('href', x)], x) for x in CATS)
				]),
				*(render_item(x) for x in posts),
			]),
			('script', [('src', '/script.js')], ' '),
		]))
	return '<!DOCTYPE html>'+serialise(tree)

def render_item(item: Item) -> Elem:
	return ('article', [ ('id', guid(item[0])), ('t', item[1]) ], [
		('span', [('class', 'data')], [ ymd(item[0]) ]),
		item[2],
	])

def render_rss(xs: List[Item]) -> str:
	tree: Elem = ('rss', (
		('version', '2.0'),
		('xmlns:atom', 'http://www.w3.org/2005/Atom')), (
			('channel', None, (
				('title', None, [CONF['title']]),
				('link', None, ['https://%s.neocities.org' % (CONF['sitename'],)]),
				('atom:link', (
					('href', 'https://%s.neocities.org/rss.xml' % (CONF['sitename'],)),
					('rel', 'self'),
					('type', 'application/rss+xml')),
					None),
				('description', None, [CONF['title']]),
				('pubDate', None, [rfctime(xs[0][0])]),
				('language', None, ['en-gb']),
				('ttl', None, ['1440']),
				*(render_item_rss(x) for x in xs)
			)),
		))
	return '<?xml version="1.0" encoding="UTF-8" ?>'+serialise(tree)

def render_item_rss(item: Item) -> Elem:
	g: str = guid(item[0])
	return ('item', None, [
		('title', None, [ 'New post on %s (%s)' % (CONF['sitename'], g) ]),
		('guid', [ ('isPermaLink', 'false') ], [ 'https://%s.neocities.org/#%s' % (CONF['sitename'], g) ]),
		('pubDate', None, [ rfctime(item[0]) ]),
		('description', None, [ escape(absolute_links(item[2])) ]),
		('link', None, [ 'https://%s.neocities.org/#%s' % (CONF['sitename'], g) ]),
	])

def imglink(href: str, src: str, alt: Optional[str]) -> Elem:
	imgprops: List[Prop] = [ ('src', src) ]
	if alt is not None: imgprops.append(('alt', alt))
	return ('a', [('href', href)], [ ('img', imgprops, None) ])

def html(lang: str, head: Elem, body: Elem) -> Elem:
	return ('html', [('lang', lang)], [head, body])

def head(title: str) -> Elem:
	return ('head', None, [
		('meta', [ ('charset', 'utf-8') ], None),
		('meta', [ ('name', 'viewport'), ('content', 'width=device-width, initial-scale=1.0') ], None),
		('meta', [ ('name', 'url'), ('content', 'https://%s.neocities.org' % (CONF['sitename'],)) ], None),
		('meta', [ ('name', 'author'), ('content', CONF['author']) ], None),
		('meta', [ ('name', 'description'), ('content', CONF['title']) ], None),
		('link', [ ('rel', 'stylesheet'), ('href', '/style.css') ], None),
		('link', [ ('rel', 'icon'), ('href', '/favicon.ico?v=2') ], None),
		('link', [ ('rel', 'alternate'), ('href', '/rss.xml'), ('type', 'application/rss+xml') ], None),
		('title', None, [ title ]),
	])

def page(title: str, body: str) -> Elem:
	now = int(time.time())
	return html('en-gb', head(title),
		('body', None, [
			('header', None, [
				('a', [('href', '/')], 'Home'),
				' â€” ',
				('span', [('class', 'data')], ymd(now))
			]),
			('main', None, body)
		]))

def escape(x: str) -> str:
	for i in (('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')):
		x = x.replace(*i)
	return x

def int_to_base(x: int, base: int) -> str:
	if x == 0: return DIGITS[0]
	xs: List[str] = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return emptyjoin(reversed(xs))

def absolute_links(x: str) -> str:
	for i in ('href', 'src'):
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def serialise(x: Union[str, Elem]) -> str:
	if isinstance(x, str): return x
	xs: List[str] = ['\n<', x[0]]
	if x[1] is not None:
		xs.extend(' %s="%s"' % (x[0], x[1]) for x in x[1])
	if x[2] is not None:
		tmp = [serialise(x) for x in x[2]]
		if len(tmp) != 0:
			xs.append('>')
			xs.extend(tmp)
			xs.extend(['</', x[0], '>'])
	else:
		xs.append('/>')
	return emptyjoin(xs)

def parse(x: str) -> Item:
	p: List[str] = x.strip().split('\n', 2)
	return (int(p[0]), p[1], p[2])

def item_stream(fp: TextIO) -> Iterable[str]: return fp.read(-1).strip().split('\n\n')
def guid(x: int) -> str: return int_to_base((x-1483228800)//60, len(DIGITS))
def ymd(x: int) -> str: return time.strftime('%Y-%m-%d', time.gmtime(x))
def rfctime(x: int) -> str: return time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.gmtime(x))
def emptyjoin(x: Iterable) -> str: return ''.join(x)
def read(x: str) -> TextIO: return open(x, 'r')

if __name__ == '__main__': main('posts', sys.argv[1:])
