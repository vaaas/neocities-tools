#!/usr/bin/env python3
import sys, os, time, json, string

RS = chr(30)
CONF = json.loads(open('config').read())
ITEMS = CONF['items']
DIGITS = string.digits + string.ascii_letters
FORCE = False

def main(pathname, args):
	global FORCE
	FORCE = args and args[0] == '-f'
	posts = pipe(pathname, read, item_stream, map(parse))
	total = pipe(posts, group(ITEMS))
	pipe(
		total,
		reversed,
		enumerate,
		mapFirst(niceName('index%s.html')),
		DoubleLink.fromList,
		filter(B(younger)(value)),
		map(render_index),
		map(write))
	pipe(
		total,
		last,
		withFirst('rss.xml'),
		IF(younger,
			piping(render_rss, write)))
	del total
	pipe(
		posts,
		filter(article),
		withFirst('articles/index.html'),
		IF(younger,
			piping(DoubleLink, render_index, write)))

def withFirst(p):
	def inner(x): return (p, x)
	return inner

def IF(cond, then):
	def inner(x):
		if cond(x): return then(x)
	return inner

def B(a):
	def f(b):
		def g(c):
			return a(b(c))
		return g
	return f

def pipe(x, *fs):
	for f in fs: x = f(x)
	return x

def piping(*fs):
	def inner(x):
		for f in fs: x = f(x)
		return x
	return inner

def pluck(k):
	def inner(xs):
		return xs[k]
	return inner

first = pluck(0)
second = pluck(1)
last = pluck(-1)

def prefix(p):
	def inner(x):
		return p + x
	return inner

def map(f):
	def inner(xs):
		lst = []
		for x in xs: lst.append(f(x))
		return lst
	return inner

def filter(f):
	def inner(xs):
		lst = []
		for x in xs:
			if f(x): lst.append(x)
		return lst
	return inner

def group(n, margin=None):
	if margin == None: margin = n//5
	def inner(xs):
		g = []
		while len(xs) > 0:
			if (len(xs) < n + margin):
				g.append(xs[:])
				xs = []
			else:
				g.append(xs[:n])
				xs = xs[:n]
		return g
	return inner

def write(x):
	if not last(x): return
	with open('render/'+first(x), 'w') as p:
		print('Making \033[1m\033[92m%s\033[0m' % (first(x),))
		p.write(last(x))

def niceName(s):
	def inner(x):
		if x == 0: return s % ('',)
		else: return s % ((x+1)*ITEMS,)
	return inner

def render_index(items):
	name = first(items.x)
	posts = last(items.x)
	prev = first(items.prev.x) if items.prev else None
	next = first(items.next.x) if items.next else None
	template = 'templates/frontpage.html' if prev == None else 'templates/index.html'
	body = (navhead(prev, next) +
		'<main>' +
		pipe(posts, reversed, map(render_item), linejoin) +
		'</main>')
	with read(template) as fp:
		template = fp.read(-1)
	return (name, template.replace('{{BODY}}', body))

def render_item(item):
	return ('<article id="%s"><span class="data">%s</span>%s</article>' %
		(guid(item.timestamp), ymd(item.timestamp), item.content))

def render_rss(x):
	body = pipe(x, last, reversed, map(render_item_rss), linejoin)
	with read('templates/rss.xml') as fp:
		tpl = fp.read(-1)
	return (first(x), tpl
		.replace("{{PUBDATE}}", rfctime(last(last(x)).timestamp))
		.replace("{{BODY}}", body))

def render_item_rss(item):
	g = guid(item.timestamp)
	return ("<item>" +
		"<title>New post on %s (%s)</title>" % (CONF["sitename"], g) +
		"<guid PermaLink=\"false\">post/%s</guid>" % (g,) +
		"<pubDate>%s</pubDate>" % (rfctime(item.timestamp),) +
		"<description>%s</description>" % (escape(absolute_links(item.content)),) +
		"<link>https://%s.neocities.org/#%s</link>" %(CONF["sitename"], g) +
		"</item>")

def navhead(p=None, n=None, up=False):
	return ("<nav>" +
		("<a href=\"%s\">← Previous</a>" % (p,) if p else "") +
		("<a href=\"../\">↑ Up</a>" if up else "") +
		("<a href=\"%s\">Next →</a>" % (n,) if n else "") +
		"</nav>")

def escape(x):
	for i in [('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')]:
		x = x.replace(*i)
	return x

def int_to_base(x, base):
	if x == 0: return DIGITS[0]
	xs = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return emptyjoin(reversed(xs))

def absolute_links(x):
	for i in ['href', 'src']:
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def item_stream(fp, block_size=2048):
	data = fp.read(block_size)
	while True:
		i = data.find(RS, 1)
		if i != -1:
			yield data[:i]
			data = data[i:]
		else:
			x = fp.read(block_size)
			if x == '': break
			data += x
	if not data == '': yield data

def younger(x):
	if FORCE: return True
	own = pipe(x, first, prefix('render/'), lambda x: os.path.getmtime(x) if os.path.isfile(x) else -1)
	others = pipe(x, last, map(timestamp), max)
	return own < others

class Item():
	def __init__(self, stamp, ptype, content):
		self.timestamp = int(stamp)
		self.ptype = ptype
		self.content = content

class DoubleLink():
	def __init__(self, x):
		self.x = x
		self.next = None
		self.prev = None
	
	def append(self, x):
		self.next = DoubleLink(x)
		self.next.prev = self

	def fromList(xs):
		head = DoubleLink(xs[0])
		cur = head
		for x in xs[1:]:
			cur.append(x)
			cur = cur.next
		return head

	def __iter__(self):
		self.cur = self
		return self

	def __next__(self):
		if self.cur != None:
			val = self.cur
			self.cur = self.cur.next
			return val
		else: raise StopIteration

def parse(x): return Item(*x.strip().split('\n', 2))
def timestamp(x): return x.timestamp
def guid(x): return int_to_base(x, 62)
def ymd(x): return time.strftime('%Y-%m-%d', time.gmtime(x))
def rfctime(x): return time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.gmtime(x))
def linejoin(x): return '\n'.join(x)
def emptyjoin(x): return ''.join(x)
def read(x): return open(x, 'r')
def tail(xs): return xs[1:]
def article(x): return x.ptype == 'article'
def mapFirst(f): return map(lambda x: (f(x[0]), x[1]))
def value(x): return x.x

if __name__ == '__main__': main('posts', sys.argv[1:])
