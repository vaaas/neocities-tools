#!/usr/bin/env python3

import sys
import os
import re
import time
import json
import lxml.etree as ET
from jinja2 import Environment, FileSystemLoader

TPL = Environment(loader=FileSystemLoader("templates"))
CONF = json.load(open("config", "r"))

class Util:
	def now():
		return time.strftime("%a, %d %b %Y %H:%M:%S +0000")

	def full_url(partial):
		return CONF["url"] + Util.url_nohost(partial)

	def url_nohost(partial):
		p = partial.split("/")
		if p[-1] == "index.html": p[-1] = ""
		if p[0] != "": p.insert(0, "")
		return "/".join(p)

	def stamp_to_rfc822(timestamp):
		return time.strftime(
			"%a, %d %b %Y %H:%M:%S +0000",
			time.gmtime(timestamp))

	def stamp_to_ymd(timestamp):
		return time.strftime(
			"%Y-%m-%d",
			time.gmtime(timestamp))

def ranges(count):
	div, mod = divmod(count, 20)
	lst = []
	for i in range(div):
		lst.append([i*20, (i+1)*20])
	if mod < 10:
		lst[-1][-1] += mod
	else:
		lst.append([div*20, div*20 + mod])
	return lst

def write(path, what):
	with open(path, "w") as fil:
		fil.write(compactify(what))

def compactify(string):
	string = re.sub(r"\s+", " ", string, flags=re.MULTILINE)
	return string

def tostring(tree):
	return ET.tostring(tree, encoding="unicode", method="xml")

def econtents(elem):
	string = tostring(elem)
	length = len("<%s>" % (elem.tag,))
	start = string.find("<%s>" % (elem.tag,))
	end = string.rfind("</%s>" % (elem.tag,))
	return string[start+length:end]

class Target:
	def __init__(self, pathname, reqs, callback):
		self.pathname = pathname
		self.reqs = reqs
		self.callback = callback

	def make(self):
		print(self.pathname, ":", " ".join([a.pathname for a in self.reqs]))
		self.callback(self.pathname, self.reqs)

	def makep(self):
		own = os.path.getmtime(self.pathname) if os.path.isfile(self.pathname) else -1
		others = [a.mtime for a in self.reqs]
		others.sort()
		return own < others[-1]

class XMLFile:
	def __init__(self, pathname):
		self.pathname = pathname
		tree = ET.parse(self.pathname)
		self.body = econtents(tree.find("./body"))
		self.mtime = os.path.getmtime(self.pathname)
		self.ctime = int(
			tree.find("./head/meta[@name='timestamp']").attrib["value"])
		self.type = tree.find("./head/meta[@name='type']").attrib["value"]
		self.typename = {
			"article": "Article",
			"note": "Note"}[self.type]
		if self.type == "note":
			self.href = "/"
			self.title = "%s %s" % (self.typename, str(self.ctime))
			self.blurb = self.body
		else:
			self.href = Util.url_nohost("/".join(self.pathname.split("/")[1:]))
			self.title = econtents(tree.find("./head/title"))
			self.blurb = econtents(tree.find("./body/p[1]"))

def item(xmlfile):
	template = TPL.get_template("item.html")
	return template.render(conf=CONF, item=xmlfile, util=Util, title=xmlfile.title, date=Util.stamp_to_rfc822(xmlfile.ctime))

def index(articles, href_prev=None, href_next=None):
	articles.reverse()
	template = TPL.get_template("index.html")
	return template.render(conf=CONF, items=articles, util=Util, title=CONF["site"], date=Util.now(), href_prev=href_prev, href_next=href_next)

def rss(articles):
	template = TPL.get_template("rss.xml")
	return template.render(conf=CONF, items=articles, util=Util)

def main(args):
	force = len(args) > 0 and args[0] == "-f"

	source = "posts"
	target = "render"

	tgts = []
	xmlfiles = []
	for root, dirs, files in os.walk(source):
		xmlfiles += [os.path.join(root, f) for f in files]
	xmlfiles = [XMLFile(f) for f in xmlfiles]
	xmlfiles.sort(key=lambda x: x.ctime)

	for xmlfile in [xmlfile for xmlfile in xmlfiles if xmlfile.type != "note"]:
		parts = xmlfile.pathname.split(os.sep)
		parts[0] = target
		for i in range(len(parts)-1):
			pathname = os.path.join(*parts[:i+1])
			if not os.path.isdir(pathname):
				os.mkdir(pathname)
		tgts.append(Target(os.path.join(*parts), [xmlfile],
			lambda me, reqs: write(me, item(reqs[0]))))

	tgts.append(Target(
		os.path.join(target, "rss.xml"),
		xmlfiles[-20:],
		lambda me, reqs: write(me, rss(reqs))))

	args = [{"name": "index%s.html" % (str(start),), "xmlfiles": xmlfiles[start:end]} for start, end in ranges(len(xmlfiles))]
	args[-1]["name"] = "index.html"
	for i in range(len(args)):
		args[i]["href_prev"] = "/" + args[i-1]["name"] if i > 0 else None
		args[i]["href_next"] = "/" + args[i+1]["name"] if i+1 < len(args) else None
	for i in args:
		tgts.append(Target(os.path.join(target, i["name"]), i["xmlfiles"],
			lambda me, reqs, p=i["href_prev"], n=i["href_next"]: write(me, index(reqs, p, n))))

	for tgt in tgts:
		if force or tgt.makep():
			tgt.make()

if __name__ == "__main__":
	main(sys.argv[1:])
