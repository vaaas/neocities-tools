#!/usr/bin/env python3

import sys
import os
import re
import time
import json
from glob import glob
from jinja2 import Environment, FileSystemLoader

TPL = Environment(loader=FileSystemLoader("templates"))
CONF = json.load(open("config", "r"))
CONF["about"] = open("about.html").read()

def type_filter(thetype, thestuff):
	return filter(lambda x: x.type is thetype, thestuff)

def dget(dct, key): return dct[key] if key in dct else None

def now():
	return time.strftime("%a, %d %b %Y %H:%M:%S +0000")

def stamp_to_rfc822(timestamp):
	return time.strftime(
		"%a, %d %b %Y %H:%M:%S +0000",
		time.gmtime(timestamp))

def stamp_to_ymd(timestamp):
	return time.strftime(
		"%Y-%m-%d",
		time.gmtime(timestamp))

def gen_title(item):
	return "%s %d" % (item.type, item.ctime)

def gen_uri(item):
	return ("%s/%d" % (item.type, item.ctime))
	
def paginate_index(collection, name="index%s.html", lim=CONF["items"]):
	length = len(collection)
	div, mod = divmod(count, lim)
	items = []
	for i in range(div if mod == 0 else div+1):
		items.append({
			"name": name % (str(i*lim,)),
			"items": collection[i*lim:(i+1)*lim]})
	items[-1]["name"] = name % ("",)
	for i in range(len(args)):
		args[i]["prev"] = items[i - 1]["name"] if i > 0 else None
		args[i]["next"] = items[i + 1]["name"] if i + 1 < length else None
	return items

def write(path, what):
	with open(path, "w") as fil:
		fil.write(compactify(what))

def copy(target, source):
	tfile = open(target, "w")
	sfile = open(source.pathname, "r")
	tfile.write(sfile.read())
	tfile.close()
	sfile.close()

def compactify(string):
	string = re.sub(r"\s+", " ", string, flags=re.MULTILINE)
	return string

def tostring(tree):
	return ET.tostring(tree, encoding="unicode", method="xml")

def econtents(elem):
	string = tostring(elem)
	length = len("<%s>" % (elem.tag,))
	start = string.find("<%s>" % (elem.tag,))
	end = string.rfind("</%s>" % (elem.tag,))
	return string[start+length:end]

def html_escape(string):
	return (string.replace("&", "&amp;")
		.replace("<", "&lt;")
		.replace(">", "&gt;"))

class Target:
	def __init__(self, pathname, reqs, callback):
		self.pathname = pathname
		self.reqs = reqs
		self.callback = callback

	def make(self):
		print("‘\033[1m\033[92m" + self.pathname + "\033[0m’" + ":",
			" ".join([a.pathname for a in self.reqs]))
		self.callback(self.pathname, self.reqs)

	def makep(self):
		own = (os.path.getmtime(self.pathname)
			if os.path.isfile(self.pathname) else -1)
		others = [a.mtime for a in self.reqs]
		others.sort()
		return own < others[-1]

class PaginatedTarget(Target):
	def __init__(self, pathname, reqs, prev, next, callback):
		super(PaginatedTarget, self).__init__(pathname, reqs, callback)
		self.reqs = reqs
		self.prev = prev

	def make(self):
		print("‘\033[1m\033[92m" + self.pathname + "\033[0m’" + ":",
			" ".join([a.pathname for a in self.reqs]))
		self.callback(self.pathname, self.reqs, self.prev, self.next)

class Post:
	type = None
	def __init__ (self, pathname):
		self.pathname = pathname
		stat = os.stat(self.pathname)
		self.mtime = stat.st_mtime
		self.size = stat.st_size
		data = json.load(open(self.pathname, "r"))
		self.ctime = data["ctime"]
		self.ctimeymd = stamp_to_ymd(self.ctime)
		sefl.ctimerfc = stamp_to_rfc822(self.ctime)
		self.title = dget(data, "title") || gen_title(self)
		self.guid = self.href || gen_uri(self)
		self.blurb = data["blurb"]
		self.body = dget(data, "body")

class Article(Post):
	type = "Article"
	def __init__(self, pathname):
		super(Article, self).__init__(pathname)
		self.href = re.sub("^posts/", "/", self.pathname)

class Note(Post):
	type = "Note"
	def __init__(self, pathname):
		super(Note, self).__init__(pathname)
		self.href = "/"

class App(Post):
	type = "App"
	def __init__(self, pathname):
		super(App, self).__init__(pathname)
		self.href = re.sub("^posts/", "/", self.pathname)

def selector(string):
	part = string.split("/")[1]
	return {
		"articles": Article,
		"notes": Note,
		"apps": App}[part]

def item(post):
	template = TPL.get_template("item.html")
	return template.render(conf=CONF, item=post,
		title=xmlfile.title, date=stamp_to_rfc822(xmlfile.ctime))

def index(posts, prev=None, next=None):
	posts.reverse()
	template = TPL.get_template("index.html")
	return template.render(conf=CONF, items=posts,
		title=CONF["site"], date=now(),
		prev=prev, next=next)

def frontpage(posts, prev=None, next=None):
	posts.reverse()
	template = TPL.get_template("frontpage.html")
	return template.render(conf=CONF, items=posts,
		title=CONF["site"], date=now(),
		prev=prev, next=next)

def rss(articles):
	articles.reverse()
	template = TPL.get_template("rss.xml")
	return template.render(conf=CONF, items=articles, now=now())

def main(args):
	force = len(args) > 0 and args[0] == "-f"

	dbc = sqlite3.connect("blog.sqlite")

	posts = [selector(i)(i) for i in glob("posts/**/*json", recursive=True)]
	tgts = []

	for post in type_filter("Article", posts):
		tpath = re.sub(r"^posts/", "render/", xml.file.pathname)
		tgts.append(Target(tpath, [post],
			lambda path, reqs: write(path, item(reqs[0]))))

	for post in type_filter("App", posts):
		tpath = re.sub(r"^posts/", "render/", xml.file.pathname)
		tgts.append(Target(tpath, [post],
			lambda path, reqs: copy(path, reqs[0])))

	tgts.append(Target(
		"render/rss.xml",
		posts[-CONF["items"]:],
		lambda path, reqs: write(path, rss(reqs))))

	slices = paginate_index(posts, "/index%s.html")
	for i in slices[:-1]:
		tgts.append(PaginatedTarget(
			"render"+i["name"],
			i["items"],
			i["prev"], i["next"],
			lambda path, reqs, p, n:
				write(path, index(reqs, p, n))))

	i = slices[-1]
	tgts.append(PaginatedTarget(
		"render"+i["name"],
		i["items"],
		i["prev"], i["next"],
		lambda path, reqs, p, n:
			write(path, frontpage(reqs, p, n))))

	tgts.append(
		Target(
			"render/articles/index.html",
			list(type_filter("Article", posts)),
			lambda path, reqs: write(path, index(reqs))))
	tgts.append(
		Target(
			"render/apps/index.html",
			list(type_filter("App", posts)),
			lambda path, reqs: write(path, index(reqs))))

	for tgt in tgts:
		if force or tgt.makep():
			tgt.make()

if __name__ == "__main__":
	main(sys.argv[1:])
