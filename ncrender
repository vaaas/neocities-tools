#!/usr/bin/env python3

import sys
import os
import re
import time
from ast import literal_eval
import xml.etree.ElementTree as ET

CONF = {
	"site": "Vas' Website",
	"url": "https://vas.neocities.org"
}

def get_text (e): return ET.tostring(e, encoding="unicode") 
def mtime(pathname): return os.stat(pathname).st_mtime
def now(): return time.strftime('%a, %d %b %Y %H:%M:%S +0000')
def compactify (s): return re.sub(r"\s+", " ", s).strip()
def full_url (partial): return CONF["url"] + partial if partial[0] is "/" else CONF["url"] + "/" + partial
def parent_dir (path): return os.path.basename(os.path.dirname(path))

def stamp_to_rfc822(string):
	return time.strftime(
		'%a, %d %b %Y %H:%M:%S +0000',
		time.gmtime(int(string)))

def stamp_to_ymd(string):
	return time.strftime(
		'%Y-%m-%d',
		time.gmtime(int(string)))

def HTML (date, title, content):
	ts = """<!DOCTYPE html>
	<html lang="en-gb">
	<head>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta name="url" content="%s"/>
		<meta name="author" content="Vas"/>
		<meta name="description" content="A blog on technology, nerddom, nad politics"/>
		<meta name="date" content="%s"/>
		<link rel="stylesheet" href="/style.css"/>
		<link rel="icon" href="/favicon.ico?v=2"/>
		<link rel="alternate" type="application/rss+xml" href="/rss.xml"/>
		<title>%s</title>
	</head>
	<body><img alt="website icon" id="icon" src="/pics/icon.png"/>%s</body>
	</html>"""
	return compactify(ts % (CONF["url"], date, title, content))

def location_header(pathname):
	s = pathname.split("/")
	lst = []
	lst.append('<a href="/">%s</a>' % (CONF["site"],))
	p = "/"
	for i in range(len(s)-1):
		p = os.path.join(p, s[i])
		lst.append('<a href="%s/">%s</a>' % (p, s[i]))
	if s[-1] != "index.html":
		p = os.path.join(p, s[-1])
		lst.append('<a href="%s">%s</a>' % (p, s[-1]))
	return '<nav class="inline-list" id="location">%s</nav>' % "/".join(lst)

def item (pathname):
	with open(pathname, "r") as f: tree = ET.fromstring(f.read())
	title = tree.find("./head/title").text
	content = get_text(tree.find("./body"))
	pubdate = tree.find("./head/meta[@name='timestamp']").attrib["value"]
	return HTML(
		stamp_to_rfc822(pubdate),
		"%s | %s" % (title, CONF["site"]),
		'%s<data class="date" value="%s">%s</data><h1><a href="/%s">%s</a></h1>%s' % (
			location_header(pathname),
			pubdate, stamp_to_ymd(pubdate), pathname, title, content))

def compile_indices (indices):
	ts = """<main class="list">
	<section id="about">
		<h1>%s</h1>
		<p>A blog on technology, nerddom, and politics.</p>
	</section>

	<section id="links">
		<h1>Links</h1>
		<p class="inline-list">
			<a href="/rss.xml">RSS feed</a>
			<a href="mailto:whiterocket@outlook.com">Email</a>
			<a href="xmpp:vaas@xmpp.jp">XMPP</a>
			<a href="https://github.com/vaaas">GitHub</a>
		</p>
	</section>
	%s
	</main>"""
	tsi = """<section id="%s">
		<h1><a href="/%s/">%s</a></h1>
		<div class="list border-list">%s</div>
		</section>"""

	def extract_articles(index):
		with open(index, "r") as f: tree = ET.fromstring(f.read())
		return [get_text(a) for a in tree.findall(".//article")][:10]

	sections = {parent_dir(index):extract_articles(index) for index in indices}

	return HTML(
		now(),
		CONF["site"],
		ts % (
			CONF["site"],
			"".join(map(
				lambda k: tsi % (k, k, k.title(), "".join(sections[k])),
				sections))))

def rss (index):
	tsi = """<item><title>%s</title><link>%s</link><guid>%s</guid><pubDate>%s</pubDate><description><![CDATA[%s]]></description></item>""" 
	ts = """<?xml version="1.0" encoding="utf-8" ?>
	<rss version="2.0">
	<channel>
		<title>%s</title>
		<link>%s</link>
		<description>A blog on technology, nerddom, and politics</description>
		<pubDate>%s</pubDate>
		<lastBuildDate>%s</lastBuildDate>
		<language>en-gb</language>
	<ttl>1440</ttl>
	%s </channel> </rss>"""

	class Article:
		def __init__(self, tree):
			self.title = tree.find("./h1/a").text
			self.timestamp = tree.find('./*[@class="date"]').attrib["value"]
			self.pubdate = stamp_to_rfc822(self.timestamp)
			self.pathname = full_url(tree.find("./h1/a").attrib["href"])
			self.blurb = get_text(tree.find("./p")) + '<p><a href="%s">Read more</a></p>' % (self.pathname,)
		def render (self):
			return tsi % (self.title, self.pathname, self.pathname, self.pubdate, self.blurb)

	with open(index, "r") as f: tree = ET.fromstring(f.read())
	lst = []
	for section in tree.iterfind(".//section"):
		for article in section.iterfind(".//article"):
			lst.append(Article(article))
	lst.sort(key=lambda e: e.timestamp, reverse=True)

	return compactify(ts % (CONF["site"],
		CONF["url"],
		lst[0].pubdate,
		now(),
		"".join(map(lambda e: e.render(), lst))))

def index (files):
	ts = '%s <main id="%s" class="list">%s</main>'
	tsi = '<article><data class="date" value="%s">%s</data><h1><a href="/%s">%s</a></h1>%s</article>' 
	section = parent_dir(files[0])

	class Article:
		def __init__(self, pathname):
			with open(pathname, "r") as f: tree = ET.fromstring(f.read())
			self.title = tree.find("./head/title").text
			self.pubdate = tree.find("./head/meta[@name='timestamp']").attrib["value"]
			self.blurb = get_text(tree.find("./body/p[1]"))
			self.pathname = pathname
		def render (self):
			return tsi % (self.pubdate, stamp_to_ymd(self.pubdate), self.pathname, self.title, self.blurb)

	lst = [Article(p) for p in files]
	lst.sort(key=lambda x: x.pubdate, reverse=True)

	return (HTML(
		now(),
		"%s | %s" % (section.title(), CONF["site"],),
		ts % (
			location_header(section + "/index.html"),
			section,
			"".join(map(lambda e: e.render(), lst)))))

def main (fn, args):
	if fn == "item": print(item(args[0]))
	elif fn == "compile": print(compile_indices(args))
	elif fn == "index": print(index(args))
	elif fn == "rss": print(rss(args[0]))
	else: return 1

if __name__ == "__main__":
	main(sys.argv[1], sys.argv[2:])
