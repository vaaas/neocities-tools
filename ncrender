#!/usr/bin/env python3

import sys
import os
import re
import time
from ast import literal_eval
import xml.etree.ElementTree as ET

CONF = {
	"site": "Vas' Website",
	"url": "https://vas.neocities.org"
}

CURRENT_YEAR = time.strftime("%Y")

def get_text (e):
	return ET.tostring(e, encoding="unicode")

def render_map (ts, items): return map(lambda e: ts % e, items) 

def mtime(pathname): return os.stat(pathname).st_mtime

def now(): return time.strftime('%a, %d %b %Y %H:%M:%S +0000')

def stamp_to_rfc822(string):
	return time.strftime(
		'%a, %d %b %Y %H:%M:%S +0000',
		time.gmtime(int(string)))

def stamp_to_ymd(string):
	return time.strftime(
		'%Y-%m-%d',
		time.gmtime(int(string)))

def compactify (s): return re.sub(r"\s+", " ", s).strip()

def bigger (a, b): return a if a > b else b

def full_url (partial): return os.path.join(CONF["url"], partial)

def HTML (date, title, content):
	ts = """<!DOCTYPE html>
	<html lang="en-gb">
	<head>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta name="url" content="%s"/>
		<meta name="author" content="Vas"/>
		<meta name="description" content="A blog on technology, nerddom, nad politics"/>
		<meta name="date" content="%s"/>
		<link rel="stylesheet" href="/style.css"/>
		<link rel="icon" href="/favicon.ico?v=2"/>
		<link rel="alternate" type="application/rss+xml" href="/rss.xml"/>
		<title>%s</title>
	</head>
	<body><img alt="website icon" id="icon" src="/pics/icon.png"/>%s</body>
	</html>"""
	return compactify(ts % (CONF["url"], date, title, content))

def location_header(pathname):
	s = pathname.split("/")
	if s[-1] == "index.html": s.pop()
	p = "/"
	s[0] = '<a href="/">%s</a>' % (CONF["site"],)
	for i in range(1, len(s)):
		p = os.path.join(p, s[i])
		s[i] = '<a href="%s">%s</a>' % (p, s[i])
	return '<nav class="inline-list" id="location">%s</nav>' % "/".join(s)

def article (pathname):
	with open(pathname, "r") as f: tree = ET.fromstring(f.read())
	title = tree.find("./title").text
	content = get_text(tree.find("./body"))
	pubdate = tree.find("./pubDate").text
	return HTML(
		stamp_to_rfc822(pubdate),
		"%s | %s" % (title, CONF["site"]),
		'%s<data class="date" value="%s">%s</data><h1><a href="/%s">%s</a></h1>%s' % (
			location_header(pathname),
			pubdate, stamp_to_ymd(pubdate), pathname, title, content))

def notes (pathname):
	ts = '<article id="%s"><data class="date" value="%s">%s</data>%s</article>' 
	with open(pathname, "r") as f: tree = ET.fromstring("<root>"+f.read()+"</root>")
	lst = []
	for e in tree.findall("./article"):
		date = e.find("./date").text
		content = e.find("./post")
		content.tag = "p"
		content = get_text(content)
		lst.append((date, stamp_to_ymd(date), content))
	lst.sort(key=lambda e: e[1], reverse=True)
	for i in range(len(lst)): lst[i] = (i,) + lst[i]
	return HTML(
		stamp_to_rfc822(lst[0][1]),
		"Notes %s | %s" % (os.path.basename(pathname), CONF["site"]),
		'%s<main class="border-list">%s</main>' % (
			location_header(pathname),
			"".join(render_map(ts, lst))))

def index (aindex, nindex):
	ts = """<main class="list">
	<section id="about">
		<h1>%s</h1>
		<p>A blog on technology, nerddom, and politics.</p>
	</section>

	<section id="links">
		<h1>Links</h1>
		<p class="inline-list">
			<a href="/rss.xml">RSS feed</a>
			<a href="mailto:whiterocket@outlook.com">Email</a>
			<a href="xmpp:vaas@xmpp.jp">XMPP</a>
			<a href="https://github.com/vaaas">GitHub</a>
		</p>
	</section>

	<section id="notes">
		<h1><a href="/notes/">Notes</a></h1>
		<div class="list border-list">%s</div>
	</section>

	<section id="articles">
		<h1><a href="/articles/">Articles</a></h1>
		<div class="list border-list">%s</div>
	</section>
	</main>""" 

	with open(aindex, "r") as f: tree = ET.fromstring(f.read())
	articles = map(
		get_text,
		tree.findall("./body/main/article")[:10])
	artd = tree.find('./head/meta[@name="date"]').attrib["content"]

	with open(nindex, "r") as f: tree = ET.fromstring(f.read())
	notes = map(
		get_text,
		tree.findall("./body/main/article")[:10])
	noted = tree.find('./head/meta[@name="date"]').attrib["content"]

	return HTML(
		bigger(artd, noted),
		CONF["site"],
		ts % (
			CONF["site"],
			"".join(notes),
			"".join(articles)))

def rss (index):
	tsi = """<item><title>%s</title><link>%s</link><guid>%s</guid><pubDate>%s</pubDate><description>%s</description></item>""" 
	ts = """<?xml version="1.0" encoding="utf-8" ?>
	<rss version="2.0">
	<channel>
		<title>%s</title>
		<link>%s</link>
		<description>A blog on technology, nerddom, and politics</description>
		<pubDate>%s</pubDate>
		<lastBuildDate>%s</lastBuildDate>
		<language>en-gb</language>
	<ttl>1440</ttl>
	%s
	</channel>
	</rss>"""
	def parse_article (e):
		date = e.find('./*[@class="date"]').attrib["value"]
		title = e.find("./h1/a").text
		href = full_url(e.find("./h1/a").attrib["href"])
		content = get_text(e.find("./p")) + '<p><a href="%s">Read more</a></p>' % (href,)
		return (title, href, href, date, content)
	
	def parse_notes (e):
		date = e.find('./*[@class="date"]').attrib["value"]
		content = get_text(e.find("./p"))
		title = "%s note" % (date,)
		href = full_url("/notes/%s.html#%s" % (CURRENT_YEAR, e.attrib["id"]))
		return (title, href, href, date, content)
	
	with open(index, "r") as f: tree = ET.fromstring(f.read())
	lst = []
	for i in tree.findall("./body/main/section[@id='articles']//article"):
		lst.append(parse_article(i))
	for i in tree.findall("./body/main/section[@id='notes']//article"):
		lst.append(parse_notes(i))
	lst.sort(key=lambda e: e[3], reverse=True)

	return compactify(ts % (CONF["site"],
		CONF["url"],
		lst[0][3],
		now(),
		"".join(render_map(tsi, lst))))

def articleindex (pathnames):
	ts = '<article><data class="date" value="%s">%s</data><h1><a href="/%s">%s</a></h1>%s</article>' 
	lst = []
	for p in pathnames:
		with open(p, "r") as f: tree = ET.fromstring(f.read())
		title = tree.find("./title").text
		pubdate = tree.find("./pubDate").text
		blurb = get_text(tree.find("./body/p[1]"))
		lst.append((pubdate, stamp_to_ymd(pubdate), p, title, blurb))
	lst.sort(key=lambda x: x[0], reverse=True)
	return (HTML(
		stamp_to_rfc822(lst[0][0]),
		"Articles | %s" % (CONF["site"],),
		'%s<main class="list">%s</main>' % (
			location_header("/articles"),
			"".join(render_map(ts, lst)))))

def notesindex (pathnames):
	ts = '<section><h1><a href="/%s.html">%s</a></h1><p>In %s, there were %s notes</p></section>'
	lst = []
	for p in pathnames:
		with open(p, "r") as f: tree = ET.fromstring("<root>"+f.read()+"</root>")
		n = len(tree.findall("./article"))
		date = os.path.basename(p)
		lst.append((p, "%s Notes" % (date,), date, n))
	return HTML(
		now(),
		"Notes | %s" % (CONF["site"],),
		'%s<main class="list">%s</main>' % (
			location_header("/notes"),
			"".join(render_map(ts, lst))))

def main (fn, args):
	if fn == "article": print(article(*args))
	elif fn == "notes": print(notes(*args))
	elif fn == "index": print(index(args[0], args[1]))
	elif fn == "rss": print(rss(*args))
	elif fn == "articleindex": print(articleindex(args))
	elif fn == "notesindex": print(notesindex(args))
	else: return 1

if __name__ == "__main__":
	main(sys.argv[1], sys.argv[2:])
