#!/usr/bin/env python3

import sys, os, time, string, base64
import xml.dom.minidom as xml
from typing import TypeVar, List, Sequence, Callable, Any, Optional, Iterable, Tuple, Union
from mimetypes import guess_type
from urllib.parse import quote

T = TypeVar('T')
Document: xml.Node = xml.Document()
CONF: dict = dict()

DIGITS: str = string.digits + string.ascii_letters + '-_'
def int_to_base(x: int, base: int) -> str:
	if x == 0: return DIGITS[0]
	xs: List[str] = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return ''.join(reversed(xs))

def ymd(x: int) -> str: return time.strftime('%Y-%m-%d', time.gmtime(x))
def rfctime(x: int) -> str: return time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.gmtime(x))
def guid(x: int) -> str: return int_to_base((x-1483228800)//60, len(DIGITS))
def element_node(x: xml.Node) -> bool: return x.nodeType == xml.Node.ELEMENT_NODE
def text_node(x: xml.Node) -> bool: return x.nodeType == xml.Node.TEXT_NODE
def first(x: Sequence[T]) -> T: return x[0]
def tail(x: Sequence[T]) -> Sequence[T]: return x[1:]
def clone(x: xml.Node) -> xml.Node: return x.cloneNode(deep=True)
def K(a: T) -> Callable[[Any], T]: return lambda b: a
def no_slash(x: str) -> str: return tail(x) if first(x) == '/' else x

def tag_name(a: str) -> Callable[[xml.Node], bool]:
	return lambda b: element_node(b) and b.tagName == a

class RawText(xml.Text):
	def writexml(self, writer, indent='', addindent='', newl=''):
		if self.data:
			writer.write('{}{}{}'.format(indent, self.data, newl))

def createRawTextNode(data):
	r = RawText()
	r.data = data
	return r

def determine_mime_type(pathname: str) -> str:
	return guess_type(pathname)[0]

def data_uri(pathname: str, mime: Optional[str] = None) -> str:
	if mime is None: mime = determine_mime_type(pathname)
	return 'data:%s;base64,%s' % (mime, base64.b64encode(open(pathname, 'rb').read()).decode('utf8'))

def remove_all_attributes(x: xml.Node) -> xml.Node:
	for a, v in x.attributes.items(): x.removeAttribute(a)
	return x

def intersperse(item: Any, xs: Iterable) -> Iterable:
	it = iter(xs)
	yield it.__next__()
	for x in it:
		yield item
		yield x

def inner_text(x: xml.Node) -> str:
	text = []
	for n in x.childNodes:
		if text_node(n): text.append(n.data)
		elif element_node(n):
			for t in inner_text(n): text.append(t)
	return ''.join(text)

def maybe(x: Optional[T], good: Callable[[T], Any], bad: Callable[[None], Any]) -> Any:
	return bad(x) if x is None else good(x)

def HTML(lang: str, head: xml.Node, body: xml.Node) -> xml.Node:
	return E('html', [('lang', lang)], [head, body])

def HEAD(title: str) -> xml.Node:
	return E('head', None, [
		E('meta', [('charset', 'utf8')], None),
		E('meta', [('name', 'viewport'), ('content', 'width=device-width, initial-scale=1.0')], None),
		E('meta', [('name', 'url'), ('content', CONF['url'])], None),
		E('meta', [('name', 'author'), ('content', CONF['author'])], None),
		E('meta', [('name', 'description'), ('content', CONF['sitename'])], None),
		E('link', [('rel', 'stylesheet'), ('href', '/style.css')], None),
		E('link', [('rel', 'icon'), ('href', '/favicon.ico')], None),
		E('link', [('rel', 'alternate'), ('href', '/rss.xml'), ('type', 'application/rss+xml')], None),
		E('title', None, [title]),
	])

def E(
	name: str,
	attrs: Optional[Iterable[Tuple[str, str]]],
	children: Optional[Iterable[Union[xml.Node, str]]]
) -> xml.Node:
	x: xml.Node = Document.createElement(name)
	if attrs:
		for key, value in attrs: x.setAttribute(key, value)
	if children:
		for child in children:
			if isinstance(child, xml.Node): x.appendChild(child)
			elif isinstance(child, str): x.appendChild(Document.createTextNode(child))
	return x

def AIMG(src: str, href: str, alt: Optional[str] = None) -> xml.Node:
	img_attrs = [('src', src)]
	if alt: img_attrs.append(('alt', alt))
	return E('a', [('href', href)], [E('img', img_attrs, None)])

def find(f: Callable[[T], bool], xs: Iterable[T]) -> Optional[T]:
	for x in xs:
		if f(x): return x
	return None

def query_xml(doc: xml.Node, *fs: Callable[[xml.Node], bool]) -> Optional[xml.Node]:
	x = doc
	for f in fs:
		if x is None: return x
		x = find(f, x.childNodes)
	return x

def query_xml_all(x: xml.Node, *fs: Callable[[xml.Node], bool]) -> Iterable[xml.Node]:
	if len(fs) == 0:
		yield x
	else:
		cs: Iterable[xml.Node] = filter(first(fs), x.childNodes)
		for c in cs:
			yield from query_xml_all(c, *tail(fs))

def walk_node_tree(tree: xml.Node) -> Iterable[xml.Node]:
	yield tree
	for x in tree.childNodes: yield from walk_node_tree(x)

def main():
	if sys.stdin.isatty(): render_posts()
	else: create_post()

def create_post():
	doc = xml.parse('site.xml')
	posts = query_xml(doc, tag_name('site'), tag_name('posts'))
	posts.appendChild(query_xml(xml.parseString(sys.stdin.read()), tag_name('post')))
	write('site.xml', doc.toxml())

def render_posts():
	def html_final(x: xml.Node) -> str: return '<!DOCTYPE html>' + x.toxml()
	def rss_final(x: xml.Node) -> str: return '<?xml version="1.0" encoding="UTF-8"?>' + x.toxml()
	def not_skip(x: xml.Node) -> bool: return not x.hasAttribute('skip')

	global CONF
	site = query_xml(xml.parse('site.xml'), tag_name('site'))
	posts = []
	pages = []
	for x in filter(element_node, site.childNodes):
		if x.tagName in ['icon', 'sitename', 'lang', 'url', 'author']: f = inner_text
		elif x.tagName == 'links': f = lambda x: list(map(clone, query_xml_all(x, tag_name('a'))))
		elif x.tagName == 'blurb': f = lambda x: list(map(clone, x.childNodes))
		elif x.tagName == 'posts':
			posts = sorted(
				query_xml_all(x, tag_name('post')),
				key=lambda x: int(x.getAttribute('timestamp')))
			continue
		elif x.tagName == 'pages':
			pages = query_xml_all(x, tag_name('page'))
		CONF[x.tagName] = f(x)

	write('render/index.html', html_final(inline(frontpage_template(list(map(render_item, filter(not_skip, posts)))))))
	write('render/rss.xml', rss_final(rss_template(list(map(render_rss_item, filter(not_skip, posts))))))

	for x in posts:
		if not x.hasAttribute('filename'): continue
		write(
			os.path.join('render', x.getAttribute('filename')),
			html_final(inline(render_post(x))))

	for x in pages:
		if not x.hasAttribute('filename'): continue
		write(
			os.path.join('render', x.getAttribute('filename')),
			html_final(inline(render_page(x))))

def inline(tree: xml.Node, parent: Optional[xml.Node] = None) -> xml.Node:
	def get_pathname(node, attr): return os.path.join('render', no_slash(node.getAttribute(attr)))

	for node in tree.childNodes:
		if not element_node(node): continue
		elif node.tagName == 'link' and node.hasAttribute('rel') and node.getAttribute('rel') == 'stylesheet':
			stylesheet = open(get_pathname(node, 'href')).read()
			remove_all_attributes(node)
			node.tagName = 'style'
			node.appendChild(createRawTextNode(stylesheet))
		elif node.tagName == 'link' and node.hasAttribute('rel') and node.getAttribute('rel') == 'icon':
			node.setAttribute('href', data_uri(get_pathname(node, 'href')))
		elif node.tagName == 'img':
			pathname = get_pathname(node, 'src')
			if os.path.getsize(pathname) < 2**15:
				mime = determine_mime_type(pathname)
				if mime == 'image/svg+xml': tree.replaceChild(xml.parse(pathname).childNodes[0], node)
				else: node.setAttribute('src', data_uri(pathname, mime))
		elif node.tagName == 'script' and node.hasAttribute('src'):
			javascript = open(get_pathname(node, 'src')).read()
			node.removeAttribute('src')
			node.appendChild(createRawTextNode(javascript))
		else: inline(node, tree)

	return tree

def render_post(x: xml.Node) -> xml.Node:
	h1 = find(tag_name('h1'), walk_node_tree(x))
	if h1 is None: raise Exception('no h1 found')
	timestamp = int(x.getAttribute('timestamp'))
	return HTML(CONF['lang'],
		HEAD(inner_text(h1)),
		E('body', [('class', 'post')], [
			E('header', None, [
				E('a', [('href', '/')], [CONF['sitename']]),
				' â€” ',
				E('time', None, [ymd(timestamp)]),
			]),
			E('main', None, map(clone, x.childNodes)),
		]))

def render_page(x: xml.Node) -> xml.Node:
	head = query_xml(x, tag_name('head'))
	body = query_xml(x, tag_name('body'))
	body.setAttribute('class', 'page')
	return HTML(CONF['lang'],
		E('head', None, [
			E('meta', [('charset', 'utf8')], None),
			E('meta', [('name', 'viewport'), ('content', 'width=device-width, initial-scale=1.0')], None),
			E('meta', [('name', 'url'), ('content', CONF['url'])], None),
			E('meta', [('name', 'author'), ('content', CONF['author'])], None),
			E('meta', [('name', 'description'), ('content', CONF['sitename'])], None),
			E('link', [('rel', 'icon'), ('href', '/favicon.ico')], None),
			E('link', [('rel', 'alternate'), ('href', '/rss.xml'), ('type', 'application/rss+xml')], None),
			*head.childNodes,
		]),
		body)

def render_item(x: xml.Node) -> xml.Node:
	return E('article', [
		('id', guid(int(x.getAttribute('timestamp')))),
		('t', x.getAttribute('tag')),
	], description(x))

def description(x: xml.Node) -> Iterable[xml.Node]:
	yield E('time', None, ymd(int(x.getAttribute('timestamp'))))
	if x.hasAttribute('filename'):
		h1 = find(tag_name('h1'), walk_node_tree(x))
		if h1 is None: raise Exception('no h1 found')
		p = query_xml(x, tag_name('p'))
		if p is None: raise Exception('no p found')
		yield E('h1', None, [
			E('a',
				[('href', '/' + x.getAttribute('filename'))],
				map(clone, h1.childNodes)
			),
		])
		yield from map(clone, p.childNodes)
	else: yield from map(clone, x.childNodes)

def frontpage_template(posts: List[xml.Node]) -> xml.Node:
	distinct_tags: List[str] = sorted(set((x.getAttribute('t') for x in posts)))
	return HTML(CONF['lang'], HEAD(CONF['sitename']),
		E('body', None, [
			E('header', None, [
				E('div', [('class', 'imgtxt')], [
					E('img', [('src', '/pics/banner.jpg')], None),
					E('h1', None, [ CONF['sitename'] ]),
				]),
				E('p', None, CONF['blurb']),
			]),
			E('nav', None, intersperse(' ', [
				*CONF['links'],
				E('a', [('class', 'active'), ('href', 'all')], ['all']),
				*(E('a', [('href', x)], [x]) for x in distinct_tags)
			])),
			E('main', None, reversed(posts)),
			E('script', [('src', '/script.js')], [''])
		])
	)

def rss_template(posts: List[xml.Node]) -> xml.Node:
	return E('rss', [('version', '2.0'), ('xmlns:atom', 'http://www.w3.org/2005/Atom')], [
		E('channel', None, [
			E('title', None, CONF['sitename']),
			E('link', None, CONF['url']),
			E('atom:link',
				[('href', os.path.join(CONF['url'], 'rss.xml')),
				('rel', 'self'),
				('type', 'application/rss+xml')],
				None),
			E('description', None, CONF['sitename']),
			E('pubDate', None, inner_text(query_xml(first(posts), tag_name('pubDate')))),
			E('language', None, CONF['lang']),
			E('ttl', None, ['1440']),
			*reversed(posts)
		]),
	])

def render_rss_item(x: xml.Node) -> xml.Node:
	xguid = guid(int(x.getAttribute('timestamp')))
	xurl = os.path.join(CONF['url'], '#' + xguid)
	return E('item', None, [
		E('title', None, [
			maybe(find(tag_name('h1'), walk_node_tree(x)),
				inner_text,
				K('New post by %s (%s)' % (CONF['author'], xguid)))
		]),
		E('guid', None, [ xurl ]),
		E('pubDate', None, [ rfctime(int(x.getAttribute('timestamp'))) ]),
		E('link', None, [ xurl ]),
		E('description', None, (absolute_links(x).toxml() for x in description(x))),
	])

def write(pathname: str, contents: str):
	print('writing', pathname)
	fp = open(pathname, 'w')
	fp.write(contents)
	fp.close()

def absolute_links(x: xml.Node) -> xml.Node:
	if element_node(x):
		for a in ('href', 'src'):
			if x.hasAttribute(a) and not x.getAttribute(a).startswith('http'):
				x.setAttribute(a, os.path.join(CONF['url'], no_slash(x.getAttribute(a))))
		for c in x.childNodes:
			absolute_links(c)
	return x

main()
