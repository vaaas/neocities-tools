#!/usr/bin/env python3
import sys, os, time, json, string

RS = chr(30)
CONF = json.loads(open("config").read())
DIGITS = string.digits + string.ascii_letters
FORCE = False

def new_main(pathname, args):
	FORCE = args and args[0] == "-f"
	posts = open(pathname, "r")
	post_count = itemnum(posts)
	pub = (Publisher()
		.subscribe("total", Subscriber("index%s.html", post_count["total"], pagination=True, initial=render_frontpage))
		.subscribe("total", Subscriber("rss.xml", post_count["total"], render=render_rss, last=100))
		.subscribe("article", Subscriber("articles/index.html", post_count["article"])))
	for x in item_stream(posts):
		item = parse(x)
		pub.publish(x.ptype, x)
		pub.publish("total", x)
	pub.finish()

class Publisher():
	def __init__(self):
		self.channels = { "total": [] }

	def subscribe(self, channel, callback):
		if channel in self.channels:
			self.channels[channel].append(callback)
		else:
			self.channels[channel] = [callback]
		return self

	def publish(self, channel, x):
		if channel in self.channels:
			for f in self.channels[channel]: f(x)

	def finish(self):
		for channel in self.channels:
			for f in self.channels[channel]:
				f(None)

def Subscriber(name, count, pagination=False, render=render_index, initial=False):
	bucket = []
	queue = []
	skip = count - initial
	if initial is False: initial=render
	if pagination:
		xs = ranges(count)
		for x in xs:
			queue.append(name % str(x.start) if x.start > 0 else name % "")
	else: queue.append(name)
	i = len(queue) - 1

	def callback(x):
		if x is None:
			if len(bucket):
				make(bucket, queue, i, initial)
				bucket = []
			return
		if initial and skip:
			skip -= 1
			return
		bucket.append(x)
		if len(bucket) == 100 and len(queue) > 1:
			make(bucket, queue, i, render)
			i -= 1
			bucket = []
	return callback

def make(bucket, queue, i, render):
	if FORCE or younger(queue[i], bucket):
		print("Making \033[1m\033[92m%s\033[0m" % (queue[i]))
			text = render(
				bucket,
				n=queue[i-1],
				p=queue[i+1] if i < len(queue) - 2 else None,
				up="/" in queue[i])
			write(queue[i], text)

def younger(x, xs):
	own = os.path.getmtime(x) if os.path.isfile(x) else -1
	others = max(map(timestamp, xs))
	return own < others

class Item:
	def __init__(self, stamp, ptype, content):
		self.timestamp = int(stamp)
		self.ptype = ptype
		self.content = content

def ranges(x, lim=CONF["items"]):
	div, mod = divmod(x, lim)
	xs = [ range(i*lim, (i+1)*lim) for i in range(div) ]
	if mod > 20: xs.push(range(div*lim, div*lim + mod))
	else: xs[-1] = range(xs[-1].start, xs[-1].stop + mod)
	return xs

def render_frontpage(**options):
	def callback(pathname, items):
		body = (navhead(**options) +
			"<main>" +
			linejoin(map(render_item, reversed(items))) +
			"</main>")
		with open("templates/frontpage.html", "r") as fp:
			tpl = fp.read(-1)
		write(pathname, tpl.replace("{{BODY}}", body))
	return callback

def render_index(**options):
	def callback(pathname, items):
		body = (navhead(up=True, **options) +
			"<main>" +
			linejoin(map(render_item, reversed(items))) +
			"</main>")
		with open("templates/index.html", "r") as fp:
			tpl = fp.read(-1)
		write(pathname, tpl.replace("{{BODY}}", body))
	return callback

def render_item(item):
	return ('<article id="%s"><span class="data">%s</span>%s</article>' %
		(guid(item.timestamp), ymd(item.timestamp), item.content))

def render_rss(pathname, items):
	body = linejoin(map(render_item_rss, reversed(items)))
	with open("templates/rss.xml", "r") as fp:
		tpl = fp.read(-1)
	write(pathname,
		tpl
			.replace("{{PUBDATE}}", rfctime(items[-1].timestamp))
			.replace("{{BODY}}", body))

def render_item_rss(item):
	g = guid(item.timestamp)
	return ("<item>" +
		"<title>New post on %s (%s)</title>" % (CONF["sitename"], g) +
		"<guid isPermaLink=\"false\">post/%s</guid>" % (g,) +
		"<pubDate>%s</pubDate>" % (rfctime(item.timestamp),) +
		"<description>%s</description>" % (escape(absolute_links(item.content)),) +
		"<link>https://%s.neocities.org/#%s</link>" %(CONF["sitename"], g) +
		"</item>")

def navhead(p=None, n=None, up=False):
	return ("<nav>" +
		("<a href=\"%s\">← Previous</a>" % (p,) if p else "") +
		("<a href=\"../\">↑ Up</a>" if up else "") +
		("<a href=\"%s\">Next →</a>" % (n,) if n else "") +
		"</nav>")

def escape(x):
	for i in [("&", "&amp;"), ("<", "&lt;"), (">", "&gt;")]:
		x = x.replace(*i)
	return x

def int_to_base(x, base):
	if x == 0: return DIGITS[0]
	xs = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return emptyjoin(xs.reverse())

def absolute_links(x):
	for i in ["href", "src"]:
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def item_stream(fp, block_size=2048):
	data = fp.read(block_size)
	while True:
		i = data.find(RS, 1)
		if i != -1:
			yield data[:i]
			data = data[i:]
		else:
			x = fp.read(block_size)
			if x == "": break
			data += x
	if not data == "": yield data

def itemnum(x):
	c = { "total": 0 }
	for i in map(parse, item_stream(x)):
		c["total"] += 1
		if not i.ptype in c: c[i.ptype] = 1
		else: c[i.ptype] += 1
	return c

def write(f, x):
	with open(f, "w") as p: p.write(x)

def parse(x): return Item(*x.strip().split("\n", 2))
def timestamp(x): return x.timestamp
def guid(x): return int_to_base(x, 62)
def ymd(x): return time.strftime("%Y-%m-%d", time.gmtime(x))
def rfctime(x): return time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime(x))
def linejoin(x): return "\n".join(x)
def emptyjoin(x): return "".join(x)

if __name__ == "__main__": main("posts", sys.argv[1:])
