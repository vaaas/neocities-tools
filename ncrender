#!/usr/bin/env python3
import sys, os, time, json, string

CONF = json.loads(open('config').read())
ITEMS = CONF['items']
DIGITS = string.digits + string.ascii_letters
FORCE = False

def main(pathname, args):
	global FORCE
	FORCE = args and args[0] == '-f'
	posts = pipe(pathname, read, item_stream, map(parse))
	total = pipe(posts, group(ITEMS))
	pipe(
		total,
		reversed,
		enumerate,
		mapFirst(niceName('index%s.html')),
		DoubleLink.fromList,
		filter(piping(value, younger)),
		map(render_index),
		map(write))
	pipe(
		total,
		last,
		withFirst('rss.xml'),
		IF(younger,
			piping(render_rss, write)))

def withFirst(p):
	def inner(x): return (p, x)
	return inner

def IF(cond, then):
	def inner(x):
		if cond(x): return then(x)
	return inner

def pipe(x, *fs):
	for f in fs: x = f(x)
	return x

def piping(*fs):
	def inner(x):
		for f in fs: x = f(x)
		return x
	return inner

def pluck(k):
	def inner(xs):
		return xs[k]
	return inner

first = pluck(0)
second = pluck(1)
last = pluck(-1)

def prefix(p):
	def inner(x):
		return p + x
	return inner

def map(f):
	def inner(xs):
		lst = []
		for x in xs: lst.append(f(x))
		return lst
	return inner

def filter(f):
	def inner(xs):
		lst = []
		for x in xs:
			if f(x): lst.append(x)
		return lst
	return inner

def group(n, margin=None):
	if margin == None: margin = n//5
	def inner(xs):
		g = []
		while len(xs) > 0:
			if (len(xs) < n + margin):
				g.append(xs[:])
				xs = []
			else:
				g.append(xs[:n])
				xs = xs[:n]
		return g
	return inner

def write(x):
	if not last(x): return
	with open('render/'+first(x), 'w') as p:
		print('Making \033[1m\033[92m%s\033[0m' % (first(x),))
		p.write(last(x))

def niceName(s):
	def inner(x):
		if x == 0: return s % ('',)
		else: return s % ((x+1)*ITEMS,)
	return inner

def render_index(items):
	name = first(items.x)
	posts = last(items.x)
	prev = first(items.prev.x) if items.prev else None
	next = first(items.next.x) if items.next else None

	main = E('main')
	for x in pipe(posts, reversed, map(render_item)):
		main.child(x)
	nav = navhead(prev, next)
	links = E('nav')
	for x in CONF['links']:
		links.child(E('a').prop('href', CONF['links'][x]).text(x))

	return E('html').prop('lang', 'en-gb')
	.child(E('head')
		.child(E('meta').prop('charset', 'utf-8'))
		.child(E('meta').prop('viewport', 'width=device-width, initial-scale=1.0'))
		.child(E('meta').prop('url', 'https://%.neocities.org' % (CONF["sitename"],)))
		.child(E('meta').prop('author', CONF['author']))
		.child(E('meta').prop('description', CONF['title']))
		.child(E('link').prop('rel', 'stylesheet').prop('href', '/style.css'))
		.child(E('link').prop('rel', 'icon').prop('href', '/favicon.ico?v=2'))
		.child(E('link').prop('rel', 'alternate').prop('href', '/rss.xml').prop('type', 'application/rss+xml'))
		.child(E('title').text(CONF['title'])))
	.child(E('body')
		.child(E('a').prop('href', '/')
			.child(E('img').prop('alt', 'website banner').prop('class', 'icon').prop('src', '/pics/ruri_thinking_icon.jpg')))
		.child(E('header')
			.child(E('h1').text(CONF['title'])
				.child(E('a').prop('href', '/rss.xml')
					.child(E('img').prop('alt', 'emoji').prop('src', '/pics/feed-icon.svg'))))
			.child(links))
		.child(E('section').prop('id', 'about').text(CONF['about']))
		.child(nav)
		.child(main))
	.serialise()

def render_item(item):
	return E('article').prop('id', item.timestamp)
	.child(E('span').prop('class', 'data').text(ymd(item.timestamp)))
	.text(item.content)

def render_rss(x):
	channel = E('channel')
		.child(E('title').text(CONF['title']))
		.child(E('links').text('https://%.neocities.org' % (CONF['sitename'],)))
		.child(E('atom:link').prop('href', 'https://%s.neocities.org/rss.xml' % (CONF['sitename'],)).prop('rel', 'self').prop('type', 'application/rss+xml'))
		.child(E('description').text(CONF['title']))
		.child(E('pubDate').text(rfctime(last(last(x)).timestamp)))
		.child(E('language').text('en-gb'))
		.child(E('ttl').text('1440'))
	for x in pipe(x, last, reversed, map(render_item_rss)):
		channel.append(x)
	return E('rss').prop('version', '2.0').prop('xmlns:atom', 'http://www.w3.org/2005/Atom').child(child).serialise()

def render_item_rss(item):
	g = guid(item.timestamp)
	return E('item')
	.child(E('title').text('New post on %s (%s)' % (CONF['sitename'], g)))
	.child(E('guid').prop('Permalink', 'false').text('post/%s' % (g,)))
	.child(E('pubDate').text(rfctime(item.timestamp)))
	.child(E('description').text(escape(absolute_links(item.content))))
	.child(E('link').text('https://%s.neocities.org/#%s' % (CONF['sitename'], g)))

def navhead(p=None, n=None, up=False):
	x = E('nav')
	if p: x.child(E('a').prop('href', p).text('← Previous'))
	if up: x.child(E('a').prop('href', '../').text('↑ Up'))
	if n: x.child(E('a').prop('href', n).text('Next →'))
	return x

def escape(x):
	for i in [('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')]:
		x = x.replace(*i)
	return x

def int_to_base(x, base):
	if x == 0: return DIGITS[0]
	xs = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return emptyjoin(reversed(xs))

def absolute_links(x):
	for i in ['href', 'src']:
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def item_stream(fp):
	return fp.read(-1).strip().split('\n\n')

def younger(x):
	if FORCE: return True
	own = pipe(x, first, prefix('render/'), lambda x: os.path.getmtime(x) if os.path.isfile(x) else -1)
	others = pipe(x, last, map(timestamp), max)
	return own < others

class Item():
	def __init__(self, stamp, ptype, content):
		self.timestamp = int(stamp)
		self.ptype = ptype
		self.content = content

class DoubleLink():
	def __init__(self, x):
		self.x = x
		self.next = None
		self.prev = None

	def append(self, x):
		self.next = DoubleLink(x)
		self.next.prev = self

	def fromList(xs):
		head = DoubleLink(xs[0])
		cur = head
		for x in xs[1:]:
			cur.append(x)
			cur = cur.next
		return head

	def __iter__(self):
		self.cur = self
		return self

	def __next__(self):
		if self.cur != None:
			val = self.cur
			self.cur = self.cur.next
			return val
		else: raise StopIteration

class E():
	def __init__(self, x):
		self.name = x
		self.props = dict()
		self.children = []
	def prop(self, p, v):
		self.props[p] = v
		return self
	def child(self, x):
		self.children.append(x)
		return self
	def text(self, x):
		return self.child(TextNode(x))
	def serialise(self):
		parts = ['<', self.name]
		for k in in self.props:
			parts.append('%s="%s"' % (k, self.props[k]))
		if len(self.children) > 0:
			parts.append('>')
			for x in self.children: self.children(x.serialise())
			parts.extend(['</', self.name, '>'])
		else:
			parts.append('/>')
		return emptyjoin(parts)

class TextNode():
	def __init__(self, x):
		self.text = x
	def serialise(self):
		return self.text

def parse(x): return Item(*x.strip().split('\n', 2))
def timestamp(x): return x.timestamp
def guid(x): return int_to_base(x, 62)
def ymd(x): return time.strftime('%Y-%m-%d', time.gmtime(x))
def rfctime(x): return time.strftime('%a, %d %b %Y %H:%M:%S +0000', time.gmtime(x))
def emptyjoin(x): return ''.join(x)
def read(x): return open(x, 'r')
def tail(xs): return xs[1:]
def article(x): return x.ptype == 'article'
def mapFirst(f): return map(lambda x: (f(x[0]), x[1]))
def value(x): return x.x

if __name__ == '__main__': main('posts', sys.argv[1:])
