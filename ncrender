#!/usr/bin/env python3
import sys, os, time, json, string

RS = chr(30)
CONF = json.loads(open("config").read())
DIGITS = string.digits + string.ascii_letters

def main(pathname, args):
	force = args and args[0] == "-f"
	fp = open(pathname, "r")
	rngs = ranges(itemnum(fp))
	cr = rngs[0]
	c = 0
	lst = []
	fp.seek(0)
	for item in item_stream(fp):
		c += 1
		item = parse(item)
		lst.append(item)
		if not c in cr["range"]:
			if cr["name"] == "index.html":
				(Target("render/"+cr["name"])
				.deps(tuple(lst))
				.cb(render_frontpage(n=cr["next"], p=cr["previous"]))
				.make(force))
				(Target("render/"+"rss.xml")
				.deps(tuple(lst[-100:]))
				.cb(render_rss)
				.make(force))
			else:
				(Target("render/"+cr["name"])
				.deps(tuple(lst))
				.cb(render_index(n=cr["next"], p=cr["previous"]))
				.make(force))
			lst.clear()
			cr = cr["next"]
	fp.close()

class Target:
	def __init__(self, x):
		self.pathname = x
		self.dependencies = []
		self.callback = None

	def deps(self, x):
		self.dependencies = x
		return self

	def cb(self, x):
		self.callback = x
		return self

	def youngerp(self):
		own = os.path.getmtime(self.pathname) if os.path.isfile(self.pathname) else -1
		others = max(map(timestamp, self.dependencies))
		return own < others

	def make(self, force):
		if force or self.youngerp():
			print("Making \033[1m\033[92m%s\033[0m" % (self.pathname,))
			self.callback(self.pathname, self.dependencies)

class Item:
	def __init__(self, stamp, ptype, content):
		self.timestamp = int(stamp)
		self.ptype = ptype
		self.content = content

class RangeList(list):
	def __init__(self, xs=""):
		super().__init__()
		for i in xs:
			self.add(i)

	def add(self, x):
		self.append({"name": "index.html", "range": x, "next": None, "previous": None})
		if len(self) > 1:
			self[-2]["name"] = "index%s.html" % (str(self[-2]["range"].start))
			self[-2]["next"] = self[-1]
			self[-1]["previous"] = self[-2]

def ranges(n, lim=CONF["items"]):
	lst = RangeList()
	c = 0
	while n > 0:
		if n > lim+10:
			lst.add(range(c*lim, (c+1)*lim))
			c += 1
			n -= lim
		else:
			lst.add(range(c*lim, c*lim + n))
			c += 1
			n = 0
	return lst

def render_frontpage(**options):
	def callback(pathname, items):
		body = (navhead(**options) +
			"<main>" +
			linejoin(map(render_item, reversed(items))) +
			"</main>")
		with open("templates/frontpage.html", "r") as fp:
			tpl = fp.read(-1)
		write(pathname, tpl.replace("{{BODY}}", body))
	return callback

def render_index(**options):
	def callback(pathname, items):
		body = (navhead(up=True, **options) +
			"<main>" +
			linejoin(map(render_item, reversed(items))) +
			"</main>")
		with open("templates/index.html", "r") as fp:
			tpl = fp.read(-1)
		write(pathname, tpl.replace("{{BODY}}", body))
	return callback

def render_item(item):
	return ('<article id="%s"><span class="data">%s</span>%s</article>' %
		(guid(item.timestamp), ymd(item.timestamp), item.content))

def render_rss(pathname, items):
	body = linejoin(map(render_item_rss, reversed(items)))
	with open("templates/rss.xml", "r") as fp:
		tpl = fp.read(-1)
	write(pathname,
		tpl
			.replace("{{PUBDATE}}", rfctime(items[-1].timestamp))
			.replace("{{BODY}}", body))

def render_item_rss(item):
	g = guid(item.timestamp)
	return ("<item>" +
		"<title>New post on %s (%s)</title>" % (CONF["sitename"], g) +
		"<guid isPermaLink=\"false\">post/%s</guid>" % (g,) +
		"<pubDate>%s</pubDate>" % (rfctime(item.timestamp),) +
		"<description>%s</description>" % (escape(absolute_links(item.content)),) +
		"<link>https://%s.neocities.org/#%s</link>" %(CONF["sitename"], g) +
		"</item>")

def navhead(p=None, n=None, up=False):
	return ("<nav>" +
		("<a href=\"%s\">← Previous</a>" % (p,) if p else "") +
		("<a href=\"../\">↑ Up</a>" if up else "") +
		("<a href=\"%s\">Next →</a>" % (n,) if n else "") +
		"</nav>")

def escape(x):
	for i in [("&", "&amp;"), ("<", "&lt;"), (">", "&gt;")]:
		x = x.replace(*i)
	return x

def int_to_base(x, base):
	if x == 0: return DIGITS[0]
	xs = []
	while x:
		x, mod = divmod(x, base)
		xs.append(DIGITS[mod])
	return emptyjoin(xs.reverse())

def absolute_links(x):
	for i in ["href", "src"]:
		x = x.replace(
			'%s="/' % (i,),
			'%s="https://%s.neocities.org/' % (i, CONF["sitename"]))
	return x

def item_stream(fp, block_size=2048):
	data = fp.read(block_size)
	while True:
		i = data.find(RS, 1)
		if i != -1:
			yield data[:i]
			data = data[i:]
		else:
			x = fp.read(block_size)
			if x == "": break
			data += x
	if not data == "": yield data

def itemnum(x):
	c = { "total": 0 }
	for i in map(parse, item_stream(x)):
		c["total"] += 1
		if not i.ptype in c: c[i.ptype] = 1
		else: c[i.ptype] += 1
	return c

def write(f, x):
	with open(f, "w") as p: p.write(x)

def parse(x): return Item(*x.strip().split("\n", 2))
def timestamp(x): return x.timestamp
def guid(x): return int_to_base(x, 62)
def ymd(x): return time.strftime("%Y-%m-%d", time.gmtime(x))
def rfctime(x): return time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime(x))
def linejoin(x): return "\n".join(x)
def emptyjoin(x): return "".join(x)

if __name__ == "__main__": main("posts", sys.argv[1:])
