#!/usr/bin/env python3
import sys
import os
import time
import json

RS = chr(30)

CONF = json.loads(open("config").read())

def dget(dct, key): return dct[key] if key in dct else None

def stamp_to_ymd(timestamp):
	return time.strftime(
		"%Y-%m-%d",
		time.gmtime(int(timestamp)))

def stamp_to_rfc(timestamp):
	return time.strftime(
		"%a, %d %b %Y %H:%M:%S +0000",
		time.gmtime(int(timestamp)))

def item_stream(fp, block_size=2048):
	data = fp.read(block_size)
	while True:
		idx = data.find(RS, 1)
		if idx == -1:
			chunk = fp.read(block_size)
			if chunk == "": break
			else: data += chunk
		else:
			yield data[:idx]
			data = data[idx:]
	if (data != ""): yield data

def itemnum(fp, block_size=2048):
	counter = 0
	while True:
		chunk = fp.read(block_size)
		counter += chunk.count(RS)
		if len(chunk) == 0: return counter

def parse (item):
	timestamp, ptype, content = item.strip().split("\n", 2)
	return {"timestamp": timestamp, "type": ptype, "content": content }

class Target:
	def __init__ (self, pathname, dependencies, callback, *args, **kwargs):
		self.pathname = pathname
		self.dependencies = dependencies
		self.callback = callback
		self.args = args
		self.kwargs = kwargs

	def makep(self):
		own = (os.path.getmtime(self.pathname) if os.path.isfile(self.pathname) else -1)
		others = max(map(lambda x: int(x["timestamp"]), self.dependencies))
		return own < others

	def make(self, force):
		if force or self.makep():
			print("Making \033[1m\033[92m%s\033[0m" % (self.pathname,))
			self.callback(self.pathname, self.dependencies, *self.args, **self.kwargs)

def ranges(n, lim=CONF["items"]):
	c = 0
	while n > 0:
		if n > lim+10:
			yield range(c*lim, (c+1)*lim)
			c += 1
			n -= lim
		else:
			yield range(c*lim, c*lim + n)
			c += 1
			n = 0

def write(pathname, contents):
	with open(pathname, "w") as fp:
		fp.write(contents)

def render_frontpage(pathname, items, *args, **kwargs):
	body = (generate_navhead(dget(kwargs, "previous"), dget(kwargs, "next"), up=False) +
		"<main>" +
		"\n".join([render_item(i) for i in items[::-1]]) +
		"</main>")
	with open("templates/frontpage.html", "r") as fp: tpl = fp.read(-1)
	write(pathname, tpl.replace("{{BODY}}", body))

def render_index(pathname, items, *args, **kwargs):
	body = (generate_navhead(dget(kwargs, "previous"), dget(kwargs, "next"), up=True) +
		"<main>" +
		"\n".join([render_item(i) for i in items[::-1]]) +
		"</main>")
	with open("templates/index.html", "r") as fp: tpl = fp.read(-1)
	write(pathname, tpl.replace("{{BODY}}", body))

def render_item(item):
	return ("<article><data class=\"date\" value=\"%s\">%s</data>%s</article>" %
		(item["timestamp"], stamp_to_ymd(item["timestamp"]), item["content"]))

def render_rss(pathname, items, *args, **kwargs):
	body = "\n".join([render_item_rss(i) for i in items[::-1]])
	with open("templates/rss.xml", "r") as fp: tpl = fp.read(-1)
	write(pathname,
		tpl
			.replace("{{PUBDATE}}", stamp_to_rfc(items[-1]["timestamp"]))
			.replace("{{BODY}}", body))

def render_item_rss(item):
	return ("<item>" +
		"<guid>post/%s</guid>" % (item["timestamp"],) +
		"<pubDate>%s</pubDate>" % (stamp_to_rfc(item["timestamp"]),) +
		"<description><![CDATA[%s]]></description>" % (item["content"],) +
		"</item>")

def generate_navhead(previous, next, up=False):
	return ("<nav>" +
		("<a href=\"%s\">← Previous</a>" % (previous,) if previous else "") +
		("<a href=\"../\">↑ Up</a>" if up else "") +
		("<a href=\"%s\">Next →</a>" % (next,) if next else "") +
		"</nav>")

def main(pathname, args):
	force= False
	if len(args) > 0 and args[0] == "-f": force = True
	
	fp = open(pathname, "r")
	articles = []
	apps = []

	rngs = []
	for r in ranges(itemnum(fp)):
		rngs.append({"name": "index%s.html" % (str(r.start),), "range": r})
	rngs[-1]["name"] = "index.html"
	for i in range(len(rngs)-1):
		rngs[i]["next"] = rngs[i+1]["name"]
	rngs[-1]["next"] = None
	for i in range(len(rngs)-1, 0, -1):
		rngs[i]["previous"] = rngs[i-1]["name"]
	rngs[0]["previous"] = None

	i = 0
	c = 0
	lst = []
	fp.seek(0)
	for item in item_stream(fp):
		c += 1
		item = parse(item)
		if item["type"] == "article": articles.append(item)
		elif item["type"] == "app": apps.append(item)
		lst.append(item)
		if not c in rngs[i]["range"]:
			if rngs[i]["name"] is "index.html":
				Target("render/"+rngs[i]["name"], tuple(lst), render_frontpage,
				       next=rngs[i]["next"], previous=rngs[i]["previous"]).make(force)
				Target("render/"+"rss.xml", tuple(lst[:10]), render_rss).make(force)
			else:
				Target("render/"+rngs[i]["name"], tuple(lst), render_index,
					next=rngs[i]["next"], previous=rngs[i]["previous"]).make(force)
			lst.clear()
			i += 1
	fp.close()
	del rngs,i,c,lst,item,fp
	if len(articles) > 0:
		Target("render/articles/index.html", articles, render_index).make(force)
	if len(apps) > 0:
		Target("render/apps/index.html", apps, render_index).make(force)

if __name__ == "__main__":
	main("posts", sys.argv[1:])
