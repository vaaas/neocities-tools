#!/usr/bin/env python3

import sys
import os
import re
import time

SITENAME = "Vas' Website"
URL = "https://vas.neocities.org"

def mtime(pathname): return os.stat(pathname).st_mtime

def now(): return time.strftime('%a, %d %b %Y %H:%M:%S GMT')

def rfc822(string):
	return time.strftime(
		'%a, %d %b %Y %H:%M:%S GMT',
		time.strptime(string, '%Y-%m-%d')
	)

def compactify (s): return re.sub(r"\s+", " ", s).strip()

def extract(text, elem, DOTALL=False):
	string = '<%s>(.+)</%s>' % (elem, elem)
	if DOTALL:
		return re.search(string, text, flags=re.DOTALL).group(1).strip()
	else:
		return re.search(string, text).group(1).strip()

class Target:
	def __init__ (self, pathname, dependencies):
		self.mtime = mtime(pathname) if os.path.exists(pathname) else 0
		self.dependencies = dependencies
		self.pathname = pathname

	def makep (self):
		for d in self.dependencies:
			if d.mtime > self.mtime: return True
		return False

	def newer(self):
		return [d for d in self.dependencies if d.mtime > self.mtime]

	def make (self):
		print("Creating", self.pathname)
		open(self.pathname, "w").write(self.serialise())
		print("Done")

class HTML_Target (Target):
	def serialise (self, date, title, content):
		templatestring = """<!DOCTYPE html>
		<html>
		<head>
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<meta name="url" content="%s">
			<meta name="author" content="Vas">
			<meta name="description" content="A blog on technology, nerddom, nad politics">
			<meta name="date" content="%s">
			<link rel="stylesheet" href="/style.css">
			<link rel="icon" href="/favicon.ico?v=2">
			<link rel="alternate" type="application/rss+xml" href="/rss.xml">
			<title>%s</title>
		</head>
		<body><img id="icon" src="/pics/icon.png">%s</body>
		</html>"""
		return compactify(templatestring % (URL, date, title, content))

	def location_header(self):
		s = self.pathname.split("/")
		if s[-1] == "index.html": s.pop()
		p = "/"
		s[0] = '<a href="/">%s</a>' % (SITENAME)
		for i in range(1, len(s)):
			p = os.path.join(p, s[i])
			s[i] = '<a href="%s">%s</a>' % (p, s[i])
		return '<nav class="inline-list" id="location">%s</nav>' % "/".join(s)

class Article_Target (HTML_Target):
	def serialise(self):
		templatestring = "%s%s"
		d = self.dependencies[0]
		return super(Article_Target, self).serialise(
			d.pubdate,
			"%s | %s" % (d.title, SITENAME),
			templatestring % (self.location_header(), d.serialise_long()))

class Articles_Index_Target (HTML_Target):
	def serialise(self):
		templatestring = "%s<main class=\"list\">%s</main>" 
		items = [d.serialise_short() for d in self.dependencies]
		return super(Articles_Index_Target, self).serialise(
			self.dependencies[0].pubdate,
			"Articles | %s" % (SITENAME),
			templatestring % (self.location_header(), "".join(items)))

class Index_Target (HTML_Target):
	def serialise(self):
		templatestring = """<main class="list">
		<section id="about">
			<h1>%s</h1>
			<p>A blog on technology, nerddom, and politics.</p>
		</section>

		<section id="links">
			<h1>Links</h1>
			<p class="inline-list">
				<a href="/rss.xml">RSS feed</a>
				<a href="mailto:whiterocket@outlook.com">Email</a>
				<a href="xmpp:vaas@xmpp.jp">XMPP</a>
				<a href="https://github.com/vaaas">GitHub</a>
			</p>
		</section>

		<section id="articles">
			<h1><a href="/articles">Articles</a></h1>
			<div class="list border-list">%s</div>
		</section>
		</main>""" 
		items = [d.serialise_short() for d in self.dependencies]
		return super(Index_Target, self).serialise(
			self.dependencies[0].pubdate,
			SITENAME,
			templatestring % (SITENAME, "".join(items)))

class RSS_Target (Target):
	def serialise(self):
		templatestring = """<?xml version="1.0" encoding="utf-8" ?>
		<rss version="2.0">
		<channel>
			<title>%s</title>
			<link>%s</link>
			<description>A blog on technology, nerddom, and politics</description>
			<pubDate>%s</pubDate>
			<lastBuildDate>%s</lastBuildDate>
			<language>en-gb</language>
		<ttl>1440</ttl>
		%s
		</channel>
		</rss>"""
		items = [d.serialise_rss() for d in self.dependencies]
		return compactify(templatestring % (SITENAME,
			URL,
			self.dependencies[0].rfcpubdate,
			now(),
			"".join(items)))

class Dependency:
	def __init__ (self, pathname):
		self.mtime = mtime(pathname)
		self.pathname = pathname

class Article (Dependency):
	def __init__(self, pathname):
		super(Article, self).__init__(pathname)
		text = open(self.pathname, "r").read()
		self.title = extract(text, "title")
		self.content = extract(text, "body", True)
		self.pubdate = extract(text, "pubdate")
		self.rfcpubdate = rfc822(self.pubdate)
		self.blurb = self.content.split("\n", 1)[0]

	def serialise_short (self):
		return '<article><div class="date">%s</div><h1><a href="/%s">%s</a></h1>%s</article>' % (self.pubdate, self.pathname, self.title, self.blurb)

	def serialise_long (self):
		return '<div class="date">%s</div><h1><a href="/%s">%s</a></h1>%s' % (self.pubdate, self.pathname, self.title, self.content)

	def serialise_rss (self):
		url = os.path.join(URL, self.pathname)
		return """<item><title>%s</title>
		<link>%s</link>
		<guid>%s</guid>
		<pubDate>%s</pubDate>
		<description><![CDATA[%s]]></description></item>""" % (self.title, url, url, self.rfcpubdate, self.content)

def main(target="render"):
	deps = []
	for root, dirs, files in os.walk("articles"):
		for f in files:
			deps.append(Article(os.path.join(root, f)))
	deps.sort(key=lambda x: x.pubdate, reverse=True)
	targets = [Article_Target(os.path.join(target, dep.pathname), [dep]) for dep in deps]
	targets.append(
		Articles_Index_Target(
			os.path.join(target, "articles", "index.html"),
			deps[:]))
	targets.append(
		RSS_Target(
			os.path.join(target, "rss.xml"),
			deps[:10]))
	targets.append(
		Index_Target(
			os.path.join(target, "index.html"),
			deps[:10]))
	for target in targets:
		if target.makep(): target.make()
	print("All done")

if __name__ == "__main__": main(*sys.argv[1:])
