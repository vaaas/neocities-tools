#!/usr/bin/env python3

import time, sys, re

RS = chr(30)
PATHNAME = "posts"

def timestamp():
	return int(time.time())

def identity(x):
	return x

def fun_name(x):
	return x.__name__

def append(what):
	with open(PATHNAME, "a") as fp:
		fp.write(what)
	print("Appended")
	return 0

def postsegment(*args):
	return RS + "\n".join(args) + "\n\n"

def path_to_href(pathname):
	return re.search("\.?/?render/(.+$)", pathname).group(1)

def articleheader(pathname, title):
	return ("<h1>" +
		'<img class="emoji" alt="emoji" src="/pics/article.svg"/> ' +
		('<a href="%s">%s</a>' % (path_to_href(pathname), title)) +
		"</h1>")

def write_article(pathname, text, title, YMD, timestamp):
	with open("templates/item.html") as fp:
		tpl = fp.read(-1)
	tpl = (tpl
		.replace("{{TITLE}}", title)
		.replace("{{TIMESTAMP}}", timestamp)
		.replace("{{YMD}}", YMD)
		.replace("{{BODY}}", text))
	with open(pathname, "w") as fp:
		fp.write(tpl)
	print()

def note():
	print("Type your note (ends at EOF)\n")
	content = ("<img class=\"emoji\" alt=\"emoji\" src=\"/pics/note.svg\"/> " +
		sys.stdin.read(-1).strip())
	stamp = str(timestamp())
	return append(postsegment(stamp, "note", content))

def article():
	name = input("File name: ")
	pathname = "render/articles/" + name
	text = sys.stdin.read(-1)
	title = re.search("<h1>([^<]+)</h1>", text).group(1)
	blurb = re.search("<p>(.+?)</p>", text).group(1)
	timestamp = time.strftime("%s")
	ymd = time.strftime("%Y-%m-%d")
	content = articleheader(pathname, title) + "\n" + blurb
	write_article(pathname, text, title, ymd, timestamp)
	return append(postsegment(timestamp, "article", content))

def pretty_dict(xs, key=identity):
	return "\n".join(sorted(("%s: %s" % (x, key(xs[x])) for x in xs)))

def main():
	FNS = {"n": note, "a": article}
	answer = ""
	while answer not in FNS:
		answer = input("Select post type:\n" + pretty_dict(FNS, fun_name) + "\n> ").strip().lower()
	return FNS[answer]()

if __name__ == "__main__":
	sys.exit(main())
