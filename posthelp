#!/usr/bin/env python3
import time, sys, re

RS = chr(30)
PATHNAME = "posts"

def main():
	FNS = {"n": note, "a": article}
	answer = ""
	while answer not in FNS:
		answer = input("Select post type:\n" + pretty_dict(FNS, fun_name) + "\n> ").strip().lower()
	FNS[answer]()
	print("Done")

def note():
	print("Type your note (ends at EOF)\n")
	content = ("<img class=\"emoji\" alt=\"emoji\" src=\"/pics/note.svg\"/> " +
		sys.stdin.read(-1).strip())
	stamp = str(now())
	return append(postsegment(stamp, "note", content))

def article():
	name = input("File name: ")
	pathname = "render/articles/" + name
	text = sys.stdin.read(-1)
	title = extract("<h1>([^<]+)</h1>", text)
	blurb = extract("<p>(.+?)</p>", text)
	timestamp = time.strftime("%s")
	ymd = time.strftime("%Y-%m-%d")
	content = articleheader(pathname, title) + "\n" + blurb
	write_article(pathname, text, title, ymd, timestamp)
	return append(postsegment(timestamp, "article", content))

def articleheader(pathname, title):
	return ("<h1>" +
		'<img class="emoji" alt="emoji" src="/pics/article.svg"/> ' +
		('<a href="%s">%s</a>' % (path_to_href(pathname), title)) +
		"</h1>")

def write_article(pathname, text, title, YMD, timestamp):
	with open("templates/item.html") as fp:
		tpl = fp.read(-1)
	tpl = (tpl
		.replace("{{TITLE}}", title)
		.replace("{{TIMESTAMP}}", timestamp)
		.replace("{{YMD}}", YMD)
		.replace("{{BODY}}", text))
	with open(pathname, "w") as fp:
		fp.write(tpl)
	print("Wrote", pathname)

def append(x):
	with open(PATHNAME, "a") as f: f.write(x)
	print("Appended")
	return 0

def pretty_dict(xs, f=id): return linejoin(sorted(("%s: %s" % (x, f(xs[x])) for x in xs)))
def now(): return int(time.time())
def id(x): return x
def fun_name(x): return x.__name__
def postsegment(*x): return RS + linejoin(x) + "\n\n"
def path_to_href(x): return extract("\.?/?render/(.+$)", x)
def extract(r, x): return re.search(r, x).group(1)
def linejoin(x): return "\n".join(x)

if __name__ == "__main__": sys.exit(main())
