#!/usr/bin/env python3
import sys, os, json, subprocess
from getpass import getpass

CONF = json.loads(open("config").read())

def main(args):
	if len(args) >= 2:
		os.chdir(args[1])
	elif os.path.isdir("render"):
		os.chdir("render")
	else:
		raise Exception("no valid render directory")

	user = CONF["sitename"]
	print("Sitename is", user)
	password = getpass("Password: ")
	remote = remote_files(user, password)
	local = [ (os.path.relpath(x, "."), size(x)) for x in walk_files(".") ]
	remove = heads(remote).difference(heads(local))
	add = heads(set(local).difference(set(remote)))

	if remove:
		print("Deleting", commajoin(remove))
		if yes_p(input("Proceed? [y/n] > ")):
			remove_remote(remove, user, password)
			print("Done")
	else: print("Nothing to delete")

	if add:
		print("Uploading", commajoin(add))
		if yes_p(input("Proceed? [y/n] > ")):
			upload(add, user, password)
			print("Done")
	else: print("Nothing to upload")

def remote_files(user, password):
	args = ["/usr/bin/curl", "https://%s:%s@neocities.org/api/list" % (user, password)]
	x = json.loads(output(args))
	if x["result"] != "success": raise Exception("Getting remote files failed")
	return [ (x["path"], x["size"]) for x in x["files"] if not x["is_directory"] ]

def remove_remote(xs, user, password):
	args = ["/usr/bin/curl"]
	for x in xs:
		args.append("-d")
		args.append("filenames[]=" + x)
	args.append("https://%s:%s@neocities.org/api/delete" % (user, password))
	run(args)

def upload(xs, user, password):
	args = ["/usr/bin/curl"]
	for x in xs:
		args.append("-F")
		args.append("%s=@%s" % (x, x))
	args.append("https://%s:%s@neocities.org/api/upload" % (user, password))
	run(args)

def walk_files(x):
	for root, dirs, files in os.walk(x):
		for i in files:
			yield os.path.join(root, i)

def run(x): subprocess.call(x, stdout=sys.stdout, stderr=sys.stderr)
def output(x): return subprocess.check_output(x, universal_newlines=True)
def size(x): return os.stat(x).st_size
def head(x): return x[0]
def heads(x): return set(map(head, x))
def yes_p(x): return x.lower() in ["y", "ye", "yes", "yeah", "yup"]
def commajoin(x): return ", ".join(x)

if __name__ == "__main__": sys.exit(main(sys.argv))
